<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[天盾app项目总结]]></title>
      <url>http://imtianx.cn/2016/10/23/%E5%A4%A9%E7%9B%BEapp%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>经过几个星期的努力，天盾app2.0版正式发布。再次记录下自己在开发中遇到的问题：</p>
<ol>
<li>拍照图片oom</li>
<li>listview 图片错位</li>
<li>xutils 数据库的使用与升级<a id="more"></a>
</li>
</ol>
<h3 id="1-拍照显示图片oom"><a href="#1-拍照显示图片oom" class="headerlink" title="1. 拍照显示图片oom"></a>1. 拍照显示图片oom</h3><p>由于该app中有快递单的采集，用RecyclerView 展示，并且每条可能需要拍照录入三张图片，这些图片需要显示并保存到文件便于上传。<br>目前，各个各个手机拍照后生成的图片比较大，分辨率也很高，直接显示很容易出现oom,使用BitmapFactory创建bitmap显示图片，每次使用都会分配内存，通过设置它的<strong>采样率</strong>，以避免。通过使用下面的工具类来加载图片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class BitmapUtil &#123;</span><br><span class="line">private static final boolean DEBUG = false;</span><br><span class="line">private static final String TAG = BitmapUtil.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">private BitmapUtil() &#123;</span><br><span class="line">    throw new Error(&quot;Do not need instantiate!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 图片压缩处理（使用Options的方法）</span><br><span class="line"> * &lt;p/&gt;</span><br><span class="line"> * @param reqWidth  目标宽度</span><br><span class="line"> * @param reqHeight 目标高度</span><br><span class="line"> */</span><br><span class="line">public static BitmapFactory.Options calculateInSampleSize(</span><br><span class="line">        final BitmapFactory.Options options, final int reqWidth,</span><br><span class="line">        final int reqHeight) &#123;</span><br><span class="line">    // 源图片的高度和宽度</span><br><span class="line">    final int height = options.outHeight;</span><br><span class="line">    final int width = options.outWidth;</span><br><span class="line">    int inSampleSize = 1;</span><br><span class="line">    if (height &gt; 400 || width &gt; 450) &#123;</span><br><span class="line">        if (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line">            // 计算出实际宽高和目标宽高的比率</span><br><span class="line">            final int heightRatio = Math.round((float) height</span><br><span class="line">                    / (float) reqHeight);</span><br><span class="line">            final int widthRatio = Math.round((float) width</span><br><span class="line">                    / (float) reqWidth);</span><br><span class="line">            // 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高</span><br><span class="line">            // 一定都会大于等于目标的宽和高。</span><br><span class="line">            inSampleSize = heightRatio &lt; widthRatio ? heightRatio</span><br><span class="line">                    : widthRatio;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 设置压缩比例</span><br><span class="line">    options.inSampleSize = inSampleSize;</span><br><span class="line">    options.inJustDecodeBounds = false;</span><br><span class="line">    return options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取一个指定大小的bitmap</span><br><span class="line"> *</span><br><span class="line"> * @param reqWidth  目标宽度</span><br><span class="line"> * @param reqHeight 目标高度</span><br><span class="line"> */</span><br><span class="line">public static Bitmap getBitmapFromFile(String pathName, int reqWidth,</span><br><span class="line">                                       int reqHeight) &#123;</span><br><span class="line">    BitmapFactory.Options options = new BitmapFactory.Options();</span><br><span class="line">    options.inJustDecodeBounds = true;</span><br><span class="line">    BitmapFactory.decodeFile(pathName, options);</span><br><span class="line">    options = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class="line">    return BitmapFactory.decodeFile(pathName, options);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里只列出了计算采样率和从文件中加载显示的方法，如需了解更多该工具，请<a href="https://github.com/l123456789jy/Lazy/blob/master/lazylibrary/src/main/java/com/github/lazylibrary/util/BitmapUtil.java" target="_blank" rel="external">点击此处查看</a><br>具体使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int width = mImageView.getWidth();</span><br><span class="line">int height = mImageView.getHeight();</span><br><span class="line">//picPath 为图片存储路径</span><br><span class="line">mImageView.setImageBitmap(BitmapUtil.getBitmapFromFile(picPath, width, height));</span><br></pre></td></tr></table></figure></p>
<p>进过测试，连续拍照10多张并显示，内存的消耗物明显变化，大约有2M的多动，测试手机为Nexus 6,至此，oom完美解决，性能也十分好。</p>
<h3 id="2-Listview-加载网络图片错位"><a href="#2-Listview-加载网络图片错位" class="headerlink" title="2. Listview 加载网络图片错位"></a>2. Listview 加载网络图片错位</h3><p>在app登陆前，需要选择相应的快递和分部，而快递列表的设计是显示快递图片和快递公司名称，该部分数据是由网络获取的，展示在listView中。当图片地址为空时，无图片的item就会显示其他的图片，而且随着屏幕的滚动而变化，出现错位的现象。这种情况<strong>主要是由于ListView适配器 中getView的convertView复用导致的，解决办法是为imageview设置tag标记，这里以图片的url作为标记。</strong>如下，getView的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public View getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line">    ViewHolder holder;</span><br><span class="line">    if (convertView == null) &#123;</span><br><span class="line">        convertView = LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.list_item_express, parent, false);</span><br><span class="line">        holder = new ViewHolder(convertView);</span><br><span class="line">        convertView.setTag(holder);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        holder = (ViewHolder) convertView.getTag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String imgUrl = mDatas.get(position).getExpressIco();</span><br><span class="line">    holder.imgExpressIcon.setTag(imgUrl);</span><br><span class="line"></span><br><span class="line">	//这里注意图片地址的判断，被 &quot;&quot; 坑了好久</span><br><span class="line">    if (holder.imgExpressIcon.getTag() == null || holder.imgExpressIcon.getTag().equals(&quot;&quot;)) &#123;</span><br><span class="line">		//若无网络图片，显示错误图片</span><br><span class="line">        holder.imgExpressIcon.setImageResource(R.drawable.express_error);</span><br><span class="line">    &#125; else if (holder.imgExpressIcon.getTag().equals(imgUrl)) &#123;</span><br><span class="line">        x.image().bind(holder.imgExpressIcon, Constants.BASE_URL + imgUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    holder.tvExpressName.setText(mDatas.get(position).getExpressName());</span><br><span class="line"></span><br><span class="line">    return convertView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-xutils3-数据库的使用与升级"><a href="#3-xutils3-数据库的使用与升级" class="headerlink" title="3. xutils3 数据库的使用与升级"></a>3. xutils3 数据库的使用与升级</h3><p>为了节省流量，将采集的数据保存在本地，便于在wifi情况下同一上传，只有该功能需要数据库，加上项目中使用的有xutils，带有数据库模块，便没有自己写或者使用 GreenDao，Ralem等其他的数据库框架。<br>此处简单的记录下改数据库框架的使用。</p>
<ul>
<li><p>在Application中配置<br>在自己的application类（或者使用的activity）中添加配置信息，这里为了方便，在Application类中添加，并通过单利类访问使用。<br>如下部分代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class SNApplication extends Application &#123;</span><br><span class="line"></span><br><span class="line">    private static DbManager.DaoConfig mDaoConfig = null;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取数据库配置对象</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static DbManager.DaoConfig getDaoConfig() &#123;</span><br><span class="line">        if (mDaoConfig == null) &#123;</span><br><span class="line">            mDaoConfig = new DbManager.DaoConfig()</span><br><span class="line">                    .setDbName(&quot;ygjexpress.db&quot;)</span><br><span class="line">                    .setDbVersion(2)</span><br><span class="line">                    .setDbOpenListener(new DbManager.DbOpenListener() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void onDbOpened(DbManager db) &#123;</span><br><span class="line">                            // 开启WAL, 提升写入速度</span><br><span class="line">                            db.getDatabase().enableWriteAheadLogging();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .setDbUpgradeListener(new DbManager.DbUpgradeListener() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void onUpgrade(DbManager db, int oldVersion, int newVersion) &#123;</span><br><span class="line">                            //升级数据库</span><br><span class="line">                            try &#123;</span><br><span class="line">								//添加 user_id ，避免同一手机登陆多个账号出现数据混乱</span><br><span class="line">                                db.addColumn(PickupDbItem.class,&quot;user_id&quot;);</span><br><span class="line">                            &#125; catch (DbException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return mDaoConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据表对应的实体类<br>通过注解，来指定数据表名（Table）和字段名（Column），isId 指定是否为id,property设置是否唯一。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Table(name = &quot;pickup_item&quot;)</span><br><span class="line">public class PickupDbItem &#123;</span><br><span class="line">    @Column(name = &quot;id&quot;, isId = true)</span><br><span class="line">    private int id;</span><br><span class="line">    @Column(name = &quot;sender_idcrad_id&quot;)</span><br><span class="line">    private String senderIdcradID;//身份证id</span><br><span class="line">    @Column(name = &quot;express_no&quot;)</span><br><span class="line">    private String expressNo;//快递编号</span><br><span class="line">    @Column(name = &quot;pic_bale_before&quot;)</span><br><span class="line">    private String picBaleBefore;//打包前</span><br><span class="line">    @Column(name = &quot;pic_bale_after&quot;)</span><br><span class="line">    private String picBaleAfter;//打包后图片</span><br><span class="line">    @Column(name = &quot;pic_bale_complete&quot;)</span><br><span class="line">    private String picBaleComplete;//贴快递单后图片</span><br><span class="line"></span><br><span class="line">    @Column(name = &quot;user_id&quot;)</span><br><span class="line">    private String userId; //当前登录的用户id</span><br><span class="line"></span><br><span class="line">   //此处省略构造方法和getter和setter方法</span><br></pre></td></tr></table></figure>
</li>
<li><p>具体的使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//获取数据库配置</span><br><span class="line">private static DbManager mDbManager = x.getDb(SNApplication.getDaoConfig());</span><br><span class="line">//插入一条</span><br><span class="line"> mDbManager.save(pickupDbItem);</span><br><span class="line"> //查找-条</span><br><span class="line"> pickupDbItem = mDbManager.selector(PickupDbItem.class)</span><br><span class="line">                        .where(&quot;express_no&quot;, &quot;=&quot;, expressNo)</span><br><span class="line">                        .findFirst();</span><br><span class="line">//查找所有</span><br><span class="line">mDbManager.selector(PickupDbItem.class).findAll();</span><br><span class="line">//更新三个字段</span><br><span class="line"> mDbManager.update(pickupDbItem, &quot;sender_idcrad_id&quot;, &quot;pic_bale_before&quot;, &quot;pic_bale_after&quot;, &quot;pic_bale_complete&quot;);</span><br><span class="line"> //删除</span><br><span class="line"> mDbManager.delete(pickupDbItem);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>用法很简单，负责的查询条件可以使用<code>WhereBuilder</code>类来构造。更多的请参见<a href="https://github.com/imtianx/xUtils3/blob/master/sample/src/main/java/org/xutils/sample/DbFragment.java" target="_blank" rel="external">此处</a>。</p>
<ul>
<li>数据库的升级</li>
</ul>
<p>在配置文件中<strong>增加版本号，在 setDbUpgradeListener 中的 onUpgrade 方法中添加或删除列，最后在实体中添加相应的字段即可</strong>。</p>
<p>项目比较小，遇到的问题也就这些，需要查看该app的，请访问<a href="https://www.pgyer.com/ygjexpress" target="_blank" rel="external">内测平台</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Bluetooth 通信技术深入--聊天小应用]]></title>
      <url>http://imtianx.cn/2016/09/24/Android%20Bluetooth%20%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF%E6%B7%B1%E5%85%A5--%E8%81%8A%E5%A4%A9%E5%B0%8F%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>目前，市场上的大部分手机都带有蓝牙，尽管使用的不多，但作为开发者，我们还有必要了解其原理。最近的项目需要用到蓝牙技术，于是写了个 蓝牙的聊天小demo。</p>
<h3 id="1-效果示意图"><a href="#1-效果示意图" class="headerlink" title="1. 效果示意图"></a>1. 效果示意图</h3><p>这里需要两部手机进行测试。其中一部作为蓝牙服务器，另一部作为蓝牙客户端，进行通信。<a id="more"></a><br>客户端截图：<br><img src="/img/article_img/bluetooth/ble-client.gif" alt="client"><br>服务器截图：<br><img src="/img/article_img/bluetooth/ble-server.gif" alt="server"></p>
<h3 id="2-开发步骤"><a href="#2-开发步骤" class="headerlink" title="2.开发步骤"></a>2.开发步骤</h3><ol>
<li>开启蓝牙；</li>
<li>搜索蓝牙设备；</li>
<li>创建蓝牙socket，读取输出流；</li>
<li>读取和写入数据；</li>
<li>关闭连接和蓝牙。</li>
</ol>
<h3 id="3-具体的实现"><a href="#3-具体的实现" class="headerlink" title="3.具体的实现"></a>3.具体的实现</h3><h4 id="3-1-开启蓝牙"><a href="#3-1-开启蓝牙" class="headerlink" title="3.1 开启蓝牙"></a>3.1 开启蓝牙</h4><p>首先获取蓝牙适配器，若存在蓝牙未开则打开蓝牙，如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line">        if (mBluetoothAdapter == null) &#123;</span><br><span class="line">            Toast.makeText(getActivity(), &quot;无蓝牙功能&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (!mBluetoothAdapter.isEnabled()) &#123;</span><br><span class="line">                Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">                startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-2-搜索蓝牙"><a href="#3-2-搜索蓝牙" class="headerlink" title="3.2 搜索蓝牙"></a>3.2 搜索蓝牙</h4><p>首先开启蓝牙搜索功能，然后通过注册广播，搜索蓝牙设备，搜索完成后将其加入到蓝牙列表。<br>搜索蓝牙：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (mBluetoothAdapter.isDiscovering()) &#123;</span><br><span class="line">    mBluetoothAdapter.cancelDiscovery();</span><br><span class="line">    mBtnStartSearch.setText(&quot;重新搜索&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    mDatas.clear();</span><br><span class="line">    mAdapter.notifyDataSetChanged();</span><br><span class="line">    //添加设备信息到列表</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line">mBluetoothAdapter.startDiscovery();</span><br><span class="line">mBtnStartSearch.setText(&quot;ֹͣ停止搜索&quot;);</span><br></pre></td></tr></table></figure></p>
<p>注册蓝牙广播：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 搜索设备广播</span><br><span class="line">     */</span><br><span class="line">private final BroadcastReceiver mReceiver = new BroadcastReceiver() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line"></span><br><span class="line">        if (BluetoothDevice.ACTION_FOUND.equals(action)) &#123;</span><br><span class="line">            // 获得设备信息</span><br><span class="line">            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</span><br><span class="line">            // 绑定的状态不一样则进行添加</span><br><span class="line">            if (device.getBondState() != BluetoothDevice.BOND_BONDED) &#123;</span><br><span class="line">                mDatas.add(new BtInfo(device.getName(), device.getAddress(), false));</span><br><span class="line">                mAdapter.notifyDataSetChanged();</span><br><span class="line">                mListView.setSelection(mDatas.size() - 1);</span><br><span class="line">            &#125;</span><br><span class="line">            // 搜索完成</span><br><span class="line">        &#125; else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) &#123;</span><br><span class="line">            if (mListView.getCount() == 0) &#123;</span><br><span class="line">                Toast.makeText(context, &quot;没有发现设备！&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            mBtnStartSearch.setText(&quot;重新搜索&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line"> * 注册广播</span><br><span class="line"> */</span><br><span class="line">private void registerBroadcast() &#123;</span><br><span class="line">    //设备被发现广播</span><br><span class="line">    IntentFilter discoveryFilter = new IntentFilter(BluetoothDevice.ACTION_FOUND);</span><br><span class="line">    getActivity().registerReceiver(mReceiver, discoveryFilter);</span><br><span class="line"></span><br><span class="line">    // 设备发现完成</span><br><span class="line">    IntentFilter foundFilter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);</span><br><span class="line">    getActivity().registerReceiver(mReceiver, foundFilter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3-连接蓝牙设备"><a href="#3-3-连接蓝牙设备" class="headerlink" title="3.3 连接蓝牙设备"></a>3.3 连接蓝牙设备</h4><p>这里，使用listview展示蓝牙列表信息，item 的点击事件即为连接相应的蓝牙设备，点击某一项后跳转到会话页面，并通知他刷新信息，为方便，这里使用了EventBus来订阅事件，避免使用接口，如下listview 的item 的点击事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//列表item设置监听，</span><br><span class="line">mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onItemClick(AdapterView&lt;?&gt; adapterView, View view, int i, long l) &#123;</span><br><span class="line">        BtInfo info = mDatas.get(i);</span><br><span class="line">        //好友mac地址</span><br><span class="line">        MainActivity.FRIEND_MAC_ADDRESS = info.getAddress();</span><br><span class="line">        //显示提示对话框</span><br><span class="line">        final AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity());</span><br><span class="line">        dialog.setTitle(&quot;连接&quot;);</span><br><span class="line">        dialog.setMessage(&quot;名称：&quot; + info.getName() + &quot;\n&quot; + &quot;地址：&quot; + info.getAddress());</span><br><span class="line">        dialog.setPositiveButton(&quot;连接&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class="line">                mBluetoothAdapter.cancelDiscovery();</span><br><span class="line">                mBtnStartSearch.setText(&quot;重新搜索&quot;);</span><br><span class="line"></span><br><span class="line">                //连接后，跳转到会话页面</span><br><span class="line">                MainActivity.mType = MainActivity.Type.CILENT;</span><br><span class="line">                //viewPager 显示第二页</span><br><span class="line">                MainActivity.mViewPager.setCurrentItem(1);</span><br><span class="line">                //通知 ChatListFragment 刷新信息</span><br><span class="line">                EventBus.getDefault().post(new EventMsg(1));</span><br><span class="line"></span><br><span class="line">                dialogInterface.dismiss();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        dialog.setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class="line">                MainActivity.FRIEND_MAC_ADDRESS = &quot;&quot;;</span><br><span class="line">                dialogInterface.dismiss();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        dialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="3-4-创建蓝牙socket"><a href="#3-4-创建蓝牙socket" class="headerlink" title="3.4 创建蓝牙socket"></a>3.4 创建蓝牙socket</h4><p>由于socketd的操作会阻塞线程，这里在子线程中进行创建。<br><code>BluetoothSocket</code> 客户端线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 客户端线程</span><br><span class="line">private class ClientThread extends Thread &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mSocket = mDevice.createRfcommSocketToServiceRecord(UUID.fromString(&quot;00001101-0000-1000-8000-00805F9B34FB&quot;));</span><br><span class="line">            Message msg = new Message();</span><br><span class="line">            msg.obj = &quot;请稍候，正在连接服务器:&quot; + MainActivity.FRIEND_MAC_ADDRESS;</span><br><span class="line">            msg.what = STATUS_CONNECT;</span><br><span class="line">            mHandler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">            mSocket.connect();</span><br><span class="line"></span><br><span class="line">            msg = new Message();</span><br><span class="line">            msg.obj = &quot;已经连接上服务端！可以发送信息。&quot;;</span><br><span class="line">            msg.what = STATUS_CONNECT_SUCCESS;</span><br><span class="line">            mHandler.sendMessage(msg);</span><br><span class="line">            // 启动接受数据</span><br><span class="line">            mReadThread = new ReadThread();</span><br><span class="line">            mReadThread.start();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            Message msg = new Message();</span><br><span class="line">            msg.obj = &quot;连接服务端异常！断开连接重新试一试。&quot;;</span><br><span class="line">            msg.what = STATUS_CONNECT_SUCCESS;</span><br><span class="line">            mHandler.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建蓝牙连接时需要用到<code>UUID</code>,如需查看更多UUID，请点击<a href="http://blog.csdn.net/txadf/article/details/52235851" target="_blank" rel="external">这里</a>。<br><code>BluetoothServerSocket</code>蓝牙服务端socket线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> // 服务器端线程</span><br><span class="line">private class ServerThread extends Thread &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建一个蓝牙服务器 参数分别：服务器名称、UUID</span><br><span class="line">            mServerSocket = mBluetoothAdapter.listenUsingRfcommWithServiceRecord(&quot;btserver&quot;,</span><br><span class="line">                    UUID.fromString(&quot;00001101-0000-1000-8000-00805F9B34FB&quot;));</span><br><span class="line"></span><br><span class="line">            Message msg = new Message();</span><br><span class="line">            msg.obj = &quot;请稍候，正在等待客户端的连接...&quot;;</span><br><span class="line">            msg.what = STATUS_CONNECT;</span><br><span class="line">            mHandler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">			/* 接受客户端的连接请求 */</span><br><span class="line">            mSocket = mServerSocket.accept();</span><br><span class="line"></span><br><span class="line">            msg = new Message();</span><br><span class="line">            msg.obj = &quot;客户端已经连接上！可以发送信息。&quot;;</span><br><span class="line">            msg.what = STATUS_CONNECT;</span><br><span class="line">            mHandler.sendMessage(msg);</span><br><span class="line">            // 启动接受数据</span><br><span class="line">            mReadThread = new ReadThread();</span><br><span class="line">            mReadThread.start();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>启动蓝牙客户端和服务端线程方法如下(详情参见<a href="">类</a>的<code>onEventMainThread</code>方法)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (MainActivity.mType == MainActivity.Type.CILENT) &#123;</span><br><span class="line">    String address = MainActivity.FRIEND_MAC_ADDRESS;//蓝牙地址</span><br><span class="line">    if (!TextUtils.isEmpty(address)) &#123;</span><br><span class="line">        mDevice = mBluetoothAdapter.getRemoteDevice(address);</span><br><span class="line">        mClientThread = new ClientThread();</span><br><span class="line">        mClientThread.start();</span><br><span class="line">        MainActivity.isOpen = true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Toast.makeText(getActivity(), &quot;address is null !&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else if (MainActivity.mType == MainActivity.Type.SERVER) &#123;</span><br><span class="line">    mServerThread = new ServerThread();</span><br><span class="line">    mServerThread.start();</span><br><span class="line">    MainActivity.isOpen = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-5-读取和写入数据"><a href="#3-5-读取和写入数据" class="headerlink" title="3.5 读取和写入数据"></a>3.5 读取和写入数据</h4><p>这里主要是通过获取输入输出流来读取和发送数据，以读取数据为例，如下现读取数据线程代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 读取数据</span><br><span class="line">private class ReadThread extends Thread &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        int bytes;</span><br><span class="line">        InputStream is = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            is = mSocket.getInputStream();</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if ((bytes = is.read(buffer)) &gt; 0) &#123;</span><br><span class="line">                    byte[] buf_data = new byte[bytes];</span><br><span class="line">                    for (int i = 0; i &lt; bytes; i++) &#123;</span><br><span class="line">                        buf_data[i] = buffer[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    String s = new String(buf_data);</span><br><span class="line">                    Message msg = new Message();</span><br><span class="line">                    msg.obj = s;</span><br><span class="line">                    msg.what = 1;</span><br><span class="line">                    mHandler.sendMessage(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; catch (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>发送消息与此类似，具体请参见 会话类 <a href=""></a>。</p>
<h4 id="3-6-关闭连接"><a href="#3-6-关闭连接" class="headerlink" title="3.6 关闭连接"></a>3.6 关闭连接</h4><p>主要是关闭各个线程和关闭socket。</p>
<p>至此，整个蓝牙同信已经完成，测试时需要两个手机，一个座位服务器，一个作为客户端，实现他们间的通信。</p>
<p><a href="https://github.com/imtianx/StudyDemoForAndroid/blob/master/A05-bluetoothchatdemo" target="_blank" rel="external">示例demo下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Bluetooth 蓝牙技术初体验]]></title>
      <url>http://imtianx.cn/2016/09/20/Android%20Bluetooth%20%E8%93%9D%E7%89%99%E6%8A%80%E6%9C%AF%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>转自：<a href="http://www.jb51.net/article/79334.htm" target="_blank" rel="external">http://www.jb51.net/article/79334.htm</a></p>
<h3 id="1-Bluetooth包简介"><a href="#1-Bluetooth包简介" class="headerlink" title="1.Bluetooth包简介"></a>1.Bluetooth包简介</h3><p>Android平台提供了一个android.bluetooth的包，里面实现蓝牙设备之间通信的蓝牙API。总共有8个类，常用的四个类如下:<br><strong>BluetoothAdapter类</strong><br>代表了一个本地的蓝牙适配器。它是所有蓝牙交互的入口点。利用它你可以发现其他蓝牙设备，查询绑定了的设备，使用已知的MAC地址实例化一个蓝牙设备和建立一个BluetoothServerSocket（作为服务器端）来监听来自其他设备的连接。<a id="more"></a><br><strong>BluetoothDevice类</strong><br>代表了一个远端的蓝牙设备，使用它请求远端蓝牙设备连接或者获取远端蓝牙设备的名称、地址、种类和绑定状态（其信息是封装在BluetoothSocket中）。<br><strong>BluetoothSocket类</strong><br>代表了一个蓝牙套接字的接口（类似于TCP中的套接字），它是应用程序通过输入、输出流与其他蓝牙设备通信的连接点。<br><strong>BlueboothServerSocket类</strong><br>代表打开服务连接来监听可能到来的连接请求（属于server端），为了连接两个蓝牙设备必须有一个设备作为服务器打开一个服务套接字。当远端设备发起连接连接请求的时候，并且已经连接到了的时候，BlueboothServerSocket类将会返回一个BluetoothSocket。</p>
<h3 id="2-常用类的使用"><a href="#2-常用类的使用" class="headerlink" title="2.常用类的使用"></a>2.常用类的使用</h3><p><strong>BluetoothAdapter：蓝牙适配器</strong></p>
<blockquote>
<p>cancelDiscovery()取消探索，当我们正在搜索设备的时候调用这个方法将不再继续搜索<br>disable()关闭蓝牙<br>enable()打开蓝牙，这个方法打开蓝牙不会弹出提示，更多的时候我们需要问下用户是否打开，以下两行代码同样是打开蓝牙，但会提示用户：<br>Intentenabler = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);<br>startActivity(enabler);<br>getAddress()获取本地蓝牙地址<br>getDefaultAdapter()获取默认BluetoothAdapter，实际上，也只有这一种方法获取BluetoothAdapter<br>getName()获取本地蓝牙名称<br>getRemoteDevice(String address)根据蓝牙地址获取远程蓝牙设备<br>getState()获取本地蓝牙适配器当前状态<br>isDiscovering()判断当前是否正在查找设备，是则返回true<br>isEnabled()判断蓝牙是否打开，已打开返回true，否则返回false<br>listenUsingRfcommWithServiceRecord(String name,UUID uuid)根据名称，UUID创建并返回BluetoothServerSocket，这是创建BluetoothSocket服务器端的第一步<br>startDiscovery()开始搜索，这是搜索的第一步</p>
</blockquote>
<p><strong>BluetoothDevice：远程蓝牙设备</strong></p>
<blockquote>
<p>createRfcommSocketToServiceRecord(UUIDuuid)根据UUID创建并返回一个BluetoothSocket，这个方法也是我们获取BluetoothDevice<br>的目的——创建BluetoothSocket<br>这个类其他的方法，如getAddress()、getName()等，同BluetoothAdapter。</p>
</blockquote>
<p><strong>BluetoothSocket：客户端</strong></p>
<blockquote>
<p>//这个类一共有6个方法<br>close()关闭<br>connect()连接<br>isConnected()判断是否连接<br>getInptuStream()获取输入流<br>getOutputStream()获取输出流<br>getRemoteDevice()获取BluetoothSocket指定连接的远程蓝牙设备</p>
</blockquote>
<p><strong>BluetoothServerSocket：服务端</strong></p>
<blockquote>
<p>//这个类一共有4个方法<br>accept()<br>accept(int timeout)<br>close()关闭<br>getChannel()返回这个套接字绑定的通道</p>
</blockquote>
<h3 id="3-数据传输"><a href="#3-数据传输" class="headerlink" title="3.数据传输"></a>3.数据传输</h3><p><strong>蓝牙数据传输——服务器端</strong></p>
<blockquote>
<p>、获得BluetoothAdapter。<br>2、通过BluetoothAdapter.listenUsingRfcommWithServiceRecord(name,UUID uuid)方法创建BluetoothServerSocket对象。<br>3、通过luetoothServerSocket.accept()方法返回一个BluetoothSocket对象。由于该方法处于阻塞状态，需要开启线程来处理。<br>4、通过BluetoothSocket.getInputStream（）和BluetoothSocket.getOutputStream（）方法获得读写数据的InputStream和OutputStream对象。<br>5、通过InputStream.read()方法来读数据。通过OutputStream.write（）方法来写数据。</p>
</blockquote>
<p><strong>蓝牙数据传输——客户端</strong></p>
<blockquote>
<p>1、获得BluetoothAdapter。<br>2、通过BluetoothAdapter.getRemoteDevice(String address)获得指定地址的BluetoothDevice对象。<br>3、通过BluetoothDevice.createRfcommSocketToServiceRecord (UUID uuid)方法创建BluetoothSocket对象。<br>4、通过BluetoothSocket.connect（）方法来连接蓝牙设备。<br>5、通过BluetoothSocket.getInputStream（）和BluetoothSocket.getOutputStream（）方法获得读写数据的InputStream和OutputStream对象。<br>6、通过InputStream.read()方法来读数据。通过OutputStream.write（）方法来写数据。</p>
</blockquote>
<p>需要的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permissionandroid:name=&quot;android.permission.BLUETOOTH_ADMIN&quot; /&gt;</span><br><span class="line">&lt;uses-permissionandroid:name=&quot;android.permission.BLUETOOTH&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据绑定库DataBinding的使用]]></title>
      <url>http://imtianx.cn/2016/09/10/using-DataBinding/</url>
      <content type="html"><![CDATA[<p><code>Data Binding</code> 是谷歌提供的 android 数据绑定库，为了而方便开发者实现 MVVM 的架构模式，使用它可以避免我们写大量的<code>findViewByID</code>，降低代码的耦合性。<br><a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">官方介绍</a>(需翻墙)</p>
<h3 id="一、使用环境要求"><a href="#一、使用环境要求" class="headerlink" title="一、使用环境要求"></a>一、使用环境要求</h3><p>通过查看官方文档，改数据绑定库的使用环境要求如下：</p>
<ul>
<li>下载 SDK Manager 中的支持库： Support repository；<a id="more"></a></li>
<li>android studio 版本在1.3之后；</li>
<li>gradle 版本在1.5.0-alpha1之后；</li>
<li>android sdk在android 2.1（API level7 +）以后。</li>
</ul>
<h3 id="二、具体的使用"><a href="#二、具体的使用" class="headerlink" title="二、具体的使用"></a>二、具体的使用</h3><h4 id="2-1、配置-data-binding"><a href="#2-1、配置-data-binding" class="headerlink" title="2.1、配置 data binding."></a>2.1、配置 data binding.</h4><p>在 model 的gradle中的 <code>android</code> 节点下添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataBinding&#123;</span><br><span class="line">    enabled = true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-2、-建立数据对象"><a href="#2-2、-建立数据对象" class="headerlink" title="2.2、 建立数据对象"></a>2.2、 建立数据对象</h4><p>添加一个POJO类，这里定义的是 User类，添加3个变量（uname，usex，uage）及相应的get,set方法，方便接下来与布局文件惊醒绑定。</p>
<h4 id="2-3、-修改布局文件"><a href="#2-3、-修改布局文件" class="headerlink" title="2.3、 修改布局文件"></a>2.3、 修改布局文件</h4><p>使用databinding后，布局文件根节点不在是简单的LinearLayout，RelativeLayout等ViewGroup,而是 <code>Layout</code>，同时还增加了 <code>data</code> 元素，来为ui控件提供数据。基本局如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;data&gt;</span><br><span class="line">    &lt;/data&gt;</span><br><span class="line">    &lt;!--原先的根节点--&gt;</span><br><span class="line">    &lt;LinearLayout&gt;</span><br><span class="line">    ....</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure></p>
<p>下面简单举例说明，显示用户信息，包括用户名，性别和年龄，布局文件名为<code>activity_main</code>，使用 databinding 的布局代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;layout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;data&gt;</span><br><span class="line">        &lt;variable</span><br><span class="line">            name=&quot;user&quot;</span><br><span class="line">            type=&quot;cn.imtianx.databindingdemo.bean.User&quot;&gt;</span><br><span class="line">        &lt;/variable&gt;</span><br><span class="line">    &lt;/data&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;@&#123;user.uname&#125;&quot;/&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;@&#123;user.usex&#125;&quot;/&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;@&#123;user.uage&#125;&quot;/&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure></p>
<p>该布局主要是三个TextView，来显示信息，在<code>data</code>标签中添加了变量<code>variable</code>,其中<code>name</code>是变量名,<code>type</code>使我们定义的java类（注：需要写完整的包名），通过<code>@{}</code>来为 TextView设置显示的文本。<br>此外，这里的<code>data</code>也可以用<code>import</code>进行导入，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;data&gt;</span><br><span class="line">    &lt;import type=&quot;cn.imtianx.databindingdemo.bean.User&quot;/&gt;</span><br><span class="line">    &lt;variable</span><br><span class="line">        name=&quot;user&quot;</span><br><span class="line">        type=&quot;User&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果要使用<code>String</code>等<code>java.lang.*</code>下的类，则可以直接使用。</p>
<h4 id="2-4、绑定变量数据"><a href="#2-4、绑定变量数据" class="headerlink" title="2.4、绑定变量数据"></a>2.4、绑定变量数据</h4><p>编译项目即可根据布局文件名生成相关的Binding类，生成规则是按布局文件名，去掉’_‘，按驼峰法则，并在末尾添加<code>Binding</code>。如，这里的布局文件名为<code>activity_main</code>,则生成的数据绑定类为<code>ActivityMainBinding</code>，它存放在<code>包名.databinding</code>下，然后再 <strong>activity</strong>  的<strong>onCreate</strong>方法中设置变量，代码如如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    ActivityMainBinding mainBinding = DataBindingUtil</span><br><span class="line">            .setContentView(this, R.layout.activity_main);</span><br><span class="line">    User user = new User(&quot;imtianx&quot;, &quot;男&quot;, &quot;20&quot;);</span><br><span class="line">    mainBinding.setUser(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> 这里的 ActivityMainBinding 类会根据布局文件中的 variable 生成相应的 <code>set</code>方法。<br>至此，一个简单的数据绑定就实现了，运行程序，会依次显示user中设置的三个字段的值。</p>
<h3 id="三、设置见监听事件"><a href="#三、设置见监听事件" class="headerlink" title="三、设置见监听事件"></a>三、设置见监听事件</h3><p>这里可以通过两种方式进行绑定事件：<strong>方法引用</strong>和<strong>监听器引用</strong>。如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Presenter &#123;</span><br><span class="line"></span><br><span class="line">    public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class="line">        mUserBean.setName(s.toString());</span><br><span class="line">        mBinding.setUser(mUserBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        Toast.makeText(MainActivity.this, &quot;点击了名字&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onClickListenerBinding(UserBean bean) &#123;</span><br><span class="line">        Toast.makeText(MainActivity.this, bean.getSex(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用时首先在xml的data标签下添加变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;variable</span><br><span class="line">    name=&quot;presenter&quot;</span><br><span class="line">    type=&quot;cn.imtianx.databindingdemo.MainActivity.Presenter&quot;&gt;</span><br><span class="line">&lt;/variable&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-1-方法引用"><a href="#3-1-方法引用" class="headerlink" title="3.1 方法引用"></a>3.1 方法引用</h4><p>必须使用android 已有的监听的方法名及其参数，如上面的onTextChanged，onClick方法，具体的调用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:onClick=&quot;@&#123;presenter.onClick&#125;&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-2-监听器引用"><a href="#3-2-监听器引用" class="headerlink" title="3.2 监听器引用"></a>3.2 监听器引用</h4><p>可以方便的丛xml中向java代码中传递数据，可使用lambda表达式,如onClickListenerBinding，具体调用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:onClick=&quot;@&#123;()-&gt;presenter.onClickListenerBinding(user)&#125;&quot;</span><br></pre></td></tr></table></figure></p>
<p>采用了lambda表达式的格式。</p>
<h3 id="四、在Fragment中的用法"><a href="#四、在Fragment中的用法" class="headerlink" title="四、在Fragment中的用法"></a>四、在Fragment中的用法</h3><p>布局文件与上一个一样，在 Fragment 的 onCreateView 中设置相关的属性，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private ActivityMainBinding mMainBinding;</span><br><span class="line">    private User user;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.activity_main, container, false);</span><br><span class="line">        // 方式1,直接用默认生成的Binding类绑定</span><br><span class="line">        mMainBinding = ActivityMainBinding.bind(view);</span><br><span class="line"></span><br><span class="line">        // 方式2，向上转成ViewDataBinding类型</span><br><span class="line">//        ViewDataBinding viewDataBinding = ActivityMainBinding.bind(view);</span><br><span class="line">//        mMainBinding = (ActivityMainBinding) viewDataBinding;</span><br><span class="line"></span><br><span class="line">        //方式3，使用生成的Binding的inflater，</span><br><span class="line">//        mMainBinding = ActivityMainBinding.inflate(inflater);</span><br><span class="line"></span><br><span class="line">        //方式4，使用生成的Binding的inflater,类似Inflater api</span><br><span class="line">//        mMainBinding = ActivityMainBinding.inflate(inflater, container, false);</span><br><span class="line"></span><br><span class="line">        //方式5，某种情况无法生存默认Binding的情况下，并且把对应的layout传入</span><br><span class="line">//        ViewDataBinding viewDataBinding = DataBindingUtil.inflate(inflater, R.layout.activity_main, container, false);</span><br><span class="line">//        mMainBinding = (ActivityMainBinding) viewDataBinding;</span><br><span class="line"></span><br><span class="line">        //方式6，某种情况无法生存默认Binding的情况下</span><br><span class="line">//        ViewDataBinding viewDataBinding = DataBindingUtil.bind(view);</span><br><span class="line"></span><br><span class="line">        user = new User(&quot;imtianx&quot;, &quot;男&quot;, &quot;20&quot;);</span><br><span class="line">        mMainBinding.setUser(user);</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>总之，它都需要初始化Binding类，初始化model类和数据绑定。</p>
<h3 id="五-、高级用法"><a href="#五-、高级用法" class="headerlink" title="五 、高级用法"></a>五 、高级用法</h3><h4 id="5-1-使用类方法"><a href="#5-1-使用类方法" class="headerlink" title="5.1. 使用类方法"></a>5.1. 使用类方法</h4><p>首先在布局文件的<code>data</code> 使用<code>import</code>导入方法所在的类的全路径，然后再选要的地方调用，具体使用和java一样。</p>
<h4 id="5-2-类型别名"><a href="#5-2-类型别名" class="headerlink" title="5.2. 类型别名"></a>5.2. 类型别名</h4><p>在开发中可能会遇到两个用名的类，如果在<code>data</code>下同时导入他们，改如何解决？这里不用担心，可以在<code>import</code>节点下添加<code>alias</code>属性,来区别。如下示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;data&gt;</span><br><span class="line">    &lt;import type=&quot;cn.imtianx.databindingdemo.bean.User&quot; alias=&quot;User1&quot;/&gt;</span><br><span class="line">    &lt;import type=&quot;cn.imtianx.databindingdemo.model.User&quot; /&gt;</span><br><span class="line">    &lt;variable</span><br><span class="line">        name=&quot;user&quot;</span><br><span class="line">        type=&quot;User1&quot;/&gt;</span><br><span class="line">    &lt;variable</span><br><span class="line">        name=&quot;user2&quot;</span><br><span class="line">        type=&quot;User&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-3-Null-Coalescing-运算符"><a href="#5-3-Null-Coalescing-运算符" class="headerlink" title="5.3. Null Coalescing 运算符"></a>5.3. Null Coalescing 运算符</h4><p>这个和java中的三木表达式一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:text=&quot;@&#123;user.uage ??user.uage&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p>它等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:text=&quot;@&#123;user.uage!=null?user.uage:0&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-4-属性值"><a href="#5-4-属性值" class="headerlink" title="5.4. 属性值"></a>5.4. 属性值</h4><p>使用<code>@{}</code>在xml中使用java 中定义的一些属性值,如下给visibility 设置值，注意需要到如View类，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:visibility=&quot;@&#123;user.display? View.VISIBLE:View.GONE&#125;&quot;</span><br><span class="line">    android:text=&quot;@&#123;user.uage&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-5-使用资源数据"><a href="#5-5-使用资源数据" class="headerlink" title="5.5. 使用资源数据"></a>5.5. 使用资源数据</h4><p>设置<code>padding</code>的值，需要的dime文件中添加largePadding和smallPadding的item。对于引用 <code>String、drawable</code>等资源类似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">   android:layout_width=&quot;match_parent&quot;</span><br><span class="line">   android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">   android:padding=&quot;@&#123;user.display?(int)@dimen/largePadding : (int)@dimen/smallPadding&#125;&quot;</span><br><span class="line">   android:text=&quot;@&#123;user.uage&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-6-使用include"><a href="#5-6-使用include" class="headerlink" title="5.6. 使用include"></a>5.6. 使用include</h4><p>使用命名空间来传递variable，将当前 variable 的值传递给 include 进来 的布局中。<br>为 layout 添加命名空间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:bind=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br></pre></td></tr></table></figure></p>
<p>在<code>include</code>中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;include</span><br><span class="line">    layout=&quot;@layout/layout_user&quot;</span><br><span class="line">    bind:user=&quot;@&#123;user&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p>
<p>注意在 <code>layout_user.xml</code>中也要在 variable 中 定义添加 user 变量。</p>
<h4 id="5-7-使用表达式"><a href="#5-7-使用表达式" class="headerlink" title="5.7. 使用表达式"></a>5.7. 使用表达式</h4><p>java 中的表达式，在这里也是支持的，</p>
<ul>
<li>数学 + - / * %</li>
<li>字符串连接 +</li>
<li>逻辑 &amp;&amp; ||</li>
<li>二进制 &amp; | ^</li>
<li>一元运算 + - ! ~</li>
<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>
<li>比较 == &gt; &lt; &gt;= &lt;=</li>
<li>instanceof<br>….<br>Data Binding代码生成时自动检查是否为null来避免出现<code>null pointer exceptions</code>错误,<code>String</code> 类型默认值是<code>null</code> ,<code>int</code>类型默认值是 <code>0</code>，<code>boolean</code> 类型默认值是 <code>false</code>。</li>
</ul>
<h4 id="5-8-集合"><a href="#5-8-集合" class="headerlink" title="5.8. 集合"></a>5.8. 集合</h4><p>常用的集合：arrays、lists、sparse，lists以及maps，为了简便都可以使用<code>[]</code>来访问。注意,在使用泛型时<code>&lt;</code>需要转义，用<code>&amp;lt;</code>代替，否则会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt;</span><br><span class="line">  &lt;import type=&quot;android.util.SparseArray&quot;/&gt;</span><br><span class="line">  &lt;import type=&quot;java.util.Map&quot;/&gt;</span><br><span class="line">  &lt;import type=&quot;java.util.List&quot;/&gt;</span><br><span class="line">  &lt;variable name=&quot;list&quot; type=&quot;List&amp;lt;String&gt;&quot;/&gt;</span><br><span class="line">  &lt;variable name=&quot;sparse&quot; type=&quot;SparseArray&amp;lt;String&gt;&quot;/&gt;</span><br><span class="line">  &lt;variable name=&quot;map&quot; type=&quot;Map&amp;lt;String, String&gt;&quot;/&gt;</span><br><span class="line">  &lt;variable name=&quot;index&quot; type=&quot;int&quot;/&gt;</span><br><span class="line">  &lt;variable name=&quot;key&quot; type=&quot;String&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br><span class="line">…</span><br><span class="line">android:text=&quot;@&#123;list[index]&#125;&quot;</span><br><span class="line">…</span><br><span class="line">android:text=&quot;@&#123;sparse[index]&#125;&quot;</span><br><span class="line">…</span><br><span class="line">android:text=&quot;@&#123;map[key]&#125;&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-9-Data对象（数据绑定）"><a href="#5-9-Data对象（数据绑定）" class="headerlink" title="5.9.Data对象（数据绑定）"></a>5.9.Data对象（数据绑定）</h4><p>Data Binding 的强大之处主要在于双向数据绑定，当POJO对象发生变化时，通知改变Data对象，已达到更新UI的效果。有三种不同的数据变化通知机制：<code>Observable</code>对象、<code>ObservableFields</code>以及<code>observable  collections</code>。<br>这里以 Observable 为例，更改User类。使其继承<code>BaseObservable</code>,在<code>getter</code>方法前添加<code>Bindable</code>注解，在<code>setter</code>方法中调用<code>notifyPropertyChanged</code>进行更新数据。如果只更新某一字段，只需将该字段设置为<code>ObservableFields</code>类型的，如boolean,可用ObservableBoolean代替，但对其的使用需要通过get和set方法。具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class User extends BaseObservable&#123;</span><br><span class="line">    private String uname;</span><br><span class="line">    private String usex;</span><br><span class="line">    private String uage;</span><br><span class="line">    private boolean isDisplay;</span><br><span class="line"></span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String uname, String usex, String uage, boolean isDisplay) &#123;</span><br><span class="line">        this.uname = uname;</span><br><span class="line">        this.usex = usex;</span><br><span class="line">        this.uage = uage;</span><br><span class="line">        this.isDisplay = isDisplay;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bindable</span><br><span class="line">    public String getUname() &#123;</span><br><span class="line">        return uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUname(String uname) &#123;</span><br><span class="line">        this.uname = uname;</span><br><span class="line">        notifyPropertyChanged(BR.uname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public String getUsex() &#123;</span><br><span class="line">        return usex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsex(String usex) &#123;</span><br><span class="line">        this.usex = usex;</span><br><span class="line">        notifyPropertyChanged(BR.usex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public String getUage() &#123;</span><br><span class="line">        return uage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUage(String uage) &#123;</span><br><span class="line">        this.uage = uage;</span><br><span class="line">        notifyPropertyChanged(BR.uage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public boolean isDisplay() &#123;</span><br><span class="line">        return isDisplay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDisplay(boolean display) &#123;</span><br><span class="line">        isDisplay = display;</span><br><span class="line">        notifyPropertyChanged(BR.display);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>在编译期间，Bindable注解在BR(与R文件类似)类文件中生成一个Entry。BR类文件会在模块包内生成。如果用于Data类的基类不能改变，Observable接口通过方便的PropertyChangeRegistry来实现用于储存和有效地通知监听器。</p>
<p>Data Binding的基本用法已经介绍完了，但它 的使用知识点较多，暂且写到这里,对于它在ListView/RecyclerView中的用法、事件处理等稍后再做介绍。<br><br></p>
<p>文中部分资料来源于页底的参考资料。</p>
<blockquote>
<p>参考资料：</p>
<ol>
<li><a href="https://github.com/LyndonChin/MasteringAndroidDataBinding" target="_blank" rel="external">https://github.com/LyndonChin/MasteringAndroidDataBinding</a></li>
<li><a href="http://www.jianshu.com/p/b1df61a4df77" target="_blank" rel="external">http://www.jianshu.com/p/b1df61a4df77</a></li>
<li><a href="https://realm.io/cn/news/data-binding-android-boyar-mount/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">https://realm.io/cn/news/data-binding-android-boyar-mount/?utm_source=tuicool&amp;utm_medium=referral</a></li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android 异常捕获-UncaughtExceptionHandler]]></title>
      <url>http://imtianx.cn/2016/07/10/android-exception-catch-UncaughtExceptionHandler/</url>
      <content type="html"><![CDATA[<p>在android开发中，异常信息的捕获有多种方式，比如第三方的友盟、蒲公英等，这里主要使用 android 原生的 Thread.UncaughtExceptionHandler 来捕获出现的异常信息<a id="more"></a>,并给出友好的提示，避免出现停止运行，提高用户体验，下面是具体的实现过程。</p>
<p><a href="http://blog.csdn.net/zly921112/article/details/51867079" target="_blank" rel="external">转自： Android 全局异常捕获</a></p>
<h2 id="1-定义自己的异常处理类"><a href="#1-定义自己的异常处理类" class="headerlink" title="1.定义自己的异常处理类"></a>1.定义自己的异常处理类</h2><p>  新建类 <em>CrashHandler</em> 实现 <em>Thread.UncaughtExceptionHandler</em>接口，如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class CrashHandler implements Thread.UncaughtExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void uncaughtException(Thread thread, Throwable ex) &#123;</span><br><span class="line">    //回调函数，处理异常出现后的情况</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-设置该异常类为系统默认的"><a href="#2-设置该异常类为系统默认的" class="headerlink" title="2.设置该异常类为系统默认的"></a>2.设置该异常类为系统默认的</h2><p>将上面定义的异常处理类设置为系统默认的异常处理类，当出现异常时，有该类处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.setDefaultUncaughtExceptionHandler(crashHandler);</span><br></pre></td></tr></table></figure></p>
<h2 id="3-具体的实现"><a href="#3-具体的实现" class="headerlink" title="3.具体的实现"></a>3.具体的实现</h2><p>为了方便查看和修复异常，这里将出现异常的手机信息和异常信息保存在文件，以便传给服务器，具体实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line">import android.content.Context;</span><br><span class="line">import android.content.pm.PackageInfo;</span><br><span class="line">import android.content.pm.PackageManager;</span><br><span class="line">import android.os.Build;</span><br><span class="line">import android.os.Environment;</span><br><span class="line">import android.os.Looper;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.io.StringWriter;</span><br><span class="line">import java.io.Writer;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 异常管理类</span><br><span class="line"> * &lt;p/&gt;</span><br><span class="line"> * Created by imtianx on 2016-7-10.</span><br><span class="line"> */</span><br><span class="line">public class CrashHandler implements Thread.UncaughtExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 系统默认UncaughtExceptionHandler</span><br><span class="line">     */</span><br><span class="line">    private Thread.UncaughtExceptionHandler mDefaultHandler;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * context</span><br><span class="line">     */</span><br><span class="line">    private Context mContext;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 存储异常和参数信息</span><br><span class="line">     */</span><br><span class="line">    private Map&lt;String, String&gt; paramsMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 格式化时间</span><br><span class="line">     */</span><br><span class="line">    private SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd-HH-mm-ss&quot;);</span><br><span class="line"></span><br><span class="line">    private String TAG = this.getClass().getSimpleName();</span><br><span class="line"></span><br><span class="line">    private static CrashHandler mInstance;</span><br><span class="line"></span><br><span class="line">    private CrashHandler() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取CrashHandler实例</span><br><span class="line">     */</span><br><span class="line">    public static synchronized CrashHandler getInstance() &#123;</span><br><span class="line">        if (null == mInstance) &#123;</span><br><span class="line">            mInstance = new CrashHandler();</span><br><span class="line">        &#125;</span><br><span class="line">        return mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init(Context context) &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">        //设置该CrashHandler为系统默认的</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * uncaughtException 回调函数</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void uncaughtException(Thread thread, Throwable ex) &#123;</span><br><span class="line">        if (!handleException(ex) &amp;&amp; mDefaultHandler != null) &#123;</span><br><span class="line">            //如果自己没处理交给系统处理</span><br><span class="line">            mDefaultHandler.uncaughtException(thread, ex);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //自己处理</span><br><span class="line">            try &#123;//延迟3秒杀进程</span><br><span class="line">                Thread.sleep(2000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                Log.e(TAG, &quot;error : &quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            //退出程序</span><br><span class="line">            AppManager.getAppManager().AppExit(mContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收集错误信息.发送到服务器</span><br><span class="line">     *</span><br><span class="line">     * @return 处理了该异常返回true, 否则false</span><br><span class="line">     */</span><br><span class="line">    private boolean handleException(Throwable ex) &#123;</span><br><span class="line">        if (ex == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //收集设备参数信息</span><br><span class="line">        collectDeviceInfo(mContext);</span><br><span class="line">        //添加自定义信息</span><br><span class="line">        addCustomInfo();</span><br><span class="line">        //使用Toast来显示异常信息</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Looper.prepare();</span><br><span class="line">                //在此处处理出现异常的情况</span><br><span class="line">                Toast.makeText(mContext, &quot;程序开小差了呢..&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                Looper.loop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        //保存日志文件</span><br><span class="line">        saveCrashInfo2File(ex);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 收集设备参数信息</span><br><span class="line">     *</span><br><span class="line">     * @param ctx</span><br><span class="line">     */</span><br><span class="line">    public void collectDeviceInfo(Context ctx) &#123;</span><br><span class="line">        //获取versionName,versionCode</span><br><span class="line">        try &#123;</span><br><span class="line">            PackageManager pm = ctx.getPackageManager();</span><br><span class="line">            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(), PackageManager.GET_ACTIVITIES);</span><br><span class="line">            if (pi != null) &#123;</span><br><span class="line">                String versionName = pi.versionName == null ? &quot;null&quot; : pi.versionName;</span><br><span class="line">                String versionCode = pi.versionCode + &quot;&quot;;</span><br><span class="line">                paramsMap.put(&quot;versionName&quot;, versionName);</span><br><span class="line">                paramsMap.put(&quot;versionCode&quot;, versionCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            Log.e(TAG, &quot;an error occured when collect package info&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        //获取所有系统信息</span><br><span class="line">        Field[] fields = Build.class.getDeclaredFields();</span><br><span class="line">        for (Field field : fields) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                paramsMap.put(field.getName(), field.get(null).toString());</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                Log.e(TAG, &quot;an error occured when collect crash info&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加自定义参数</span><br><span class="line">     */</span><br><span class="line">    private void addCustomInfo() &#123;</span><br><span class="line">        Log.i(TAG, &quot;addCustomInfo: 程序出错了...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存错误信息到文件中</span><br><span class="line">     *</span><br><span class="line">     * @param ex</span><br><span class="line">     * @return 返回文件名称, 便于将文件传送到服务器</span><br><span class="line">     */</span><br><span class="line">    private String saveCrashInfo2File(Throwable ex) &#123;</span><br><span class="line"></span><br><span class="line">        StringBuffer sb = new StringBuffer();</span><br><span class="line">        for (Map.Entry&lt;String, String&gt; entry : paramsMap.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            sb.append(key + &quot;=&quot; + value + &quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Writer writer = new StringWriter();</span><br><span class="line">        PrintWriter printWriter = new PrintWriter(writer);</span><br><span class="line">        ex.printStackTrace(printWriter);</span><br><span class="line">        Throwable cause = ex.getCause();</span><br><span class="line">        while (cause != null) &#123;</span><br><span class="line">            cause.printStackTrace(printWriter);</span><br><span class="line">            cause = cause.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        printWriter.close();</span><br><span class="line">        String result = writer.toString();</span><br><span class="line">        sb.append(result);</span><br><span class="line">        try &#123;</span><br><span class="line">            long timestamp = System.currentTimeMillis();</span><br><span class="line">            String time = format.format(new Date());</span><br><span class="line">            String fileName = &quot;crash-&quot; + time + &quot;-&quot; + timestamp + &quot;.log&quot;;</span><br><span class="line">            if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">                String path = Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/crash/&quot;;</span><br><span class="line">                File dir = new File(path);</span><br><span class="line">                if (!dir.exists()) &#123;</span><br><span class="line">                    dir.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">                FileOutputStream fos = new FileOutputStream(path + fileName);</span><br><span class="line">                fos.write(sb.toString().getBytes());</span><br><span class="line">                Log.i(TAG, &quot;saveCrashInfo2File: &quot;+sb.toString());</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125;</span><br><span class="line">            return fileName;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, &quot;an error occured while writing file...&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注：在上述代码中使用了 AppManager类，是常用的activity 管理类 <a href="https://github.com/txadf/Android_Study_Notes/tree/master/android-tools/AppManager.md" target="_blank" rel="external">点此查看</a></p>
<h2 id="4-实际使用"><a href="#4-实际使用" class="headerlink" title="4.实际使用"></a>4.实际使用</h2><p>在application中初始化，并在配置文件中添加读写权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CrashHandler.getInstance().init(this);</span><br></pre></td></tr></table></figure></p>
<p>到此，全局异常捕获已全部完成。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android 开源库（字体图标，MD控件等）]]></title>
      <url>http://imtianx.cn/2016/06/12/android-open-source-connected/</url>
      <content type="html"><![CDATA[<p>记录自己最近在开发中使用的开源库及部分使用方法，链接地址为个人fork后的地址，可以参见原作者仓库。本文将持续更新，大家有什么好用的可以留言，一起交流学习下。<br><a id="more"></a></p>
<h3 id="1-android-开发常用工具类"><a href="#1-android-开发常用工具类" class="headerlink" title="1. android 开发常用工具类"></a>1. android 开发常用工具类</h3><p>地址：<a href="https://github.com/txadf/Lazy" target="_blank" rel="external">https://github.com/txadf/Lazy</a></p>
<h3 id="2-字体图标"><a href="#2-字体图标" class="headerlink" title="2. 字体图标"></a>2. 字体图标</h3><p>地址：<a href="https://github.com/txadf/material-icon-lib" target="_blank" rel="external">https://github.com/txadf/material-icon-lib</a><br>用法：<br>2.1.添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;net.steamcrafted:materialiconlib:1.0.9&apos;</span><br></pre></td></tr></table></figure></p>
<p>2.2.xml中使用<br>注:需要添加命名空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;net.steamcrafted.materialiconlib.MaterialIconView</span><br><span class="line">        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">        android:id=&quot;@+id/icon&quot;</span><br><span class="line">        android:layout_width=&quot;24dp&quot;</span><br><span class="line">        android:layout_height=&quot;24dp&quot;</span><br><span class="line">        android:scaleType=&quot;center&quot;</span><br><span class="line">        app:materialIcon=&quot;account&quot;</span><br><span class="line">        app:materialIconColor=&quot;@color/mainColor&quot;</span><br><span class="line">        app:materialIconSize=&quot;24dp&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p>示例效果：<br><img src="https://camo.githubusercontent.com/802f5408fb1caeae9647d6e72c5905225b24220d/687474703a2f2f692e696d6775722e636f6d2f4b584866586f382e676966" alt=""></p>
<h3 id="3-UI-Model"><a href="#3-UI-Model" class="headerlink" title="3. UI Model"></a>3. UI Model</h3><p>地址：<a href="http://genius.qiujuer.net/module/ui.html" target="_blank" rel="external">http://genius.qiujuer.net/module/ui.html</a><br>按原作者网上站上的配置。<br>具体使用，按钮的使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;net.qiujuer.genius.ui.widget.Button</span><br><span class="line">            xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">            android:id=&quot;@+id/gbtn_login&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginTop=&quot;25dp&quot;</span><br><span class="line">            android:background=&quot;@color/mainColor&quot;</span><br><span class="line">            android:onClick=&quot;LoginClickEvent&quot;</span><br><span class="line">            android:text=&quot;@string/login_btn&quot;</span><br><span class="line">            android:textColor=&quot;@color/white&quot;</span><br><span class="line">            app:gFont=&quot;roboto.ttf&quot;</span><br><span class="line">            app:gTouchColor=&quot;@color/black_alpha_32&quot;</span><br><span class="line">            app:gTouchDurationRate=&quot;0.7&quot;</span><br><span class="line">            app:gTouchEffect=&quot;ripple&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p>同样需要注意添加命名空间。</p>
<h3 id="4-xutils3"><a href="#4-xutils3" class="headerlink" title="4. xutils3"></a>4. xutils3</h3><p>地址：<a href="https://github.com/txadf/xUtils3" target="_blank" rel="external">https://github.com/txadf/xUtils3</a></p>
<h3 id="5-进度条"><a href="#5-进度条" class="headerlink" title="5.进度条"></a>5.进度条</h3><p>地址：<a href="https://github.com/txadf/spots-dialog" target="_blank" rel="external">https://github.com/txadf/spots-dialog</a><br>效果：<br><img src="https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966" alt=""></p>
<h3 id="6-对话框"><a href="#6-对话框" class="headerlink" title="6.对话框"></a>6.对话框</h3><p>地址:<a href="https://github.com/txadf/sweet-alert-dialog" target="_blank" rel="external">https://github.com/txadf/sweet-alert-dialog</a><br>示例效果：<br><img src="https://github.com/pedant/sweet-alert-dialog/raw/master/change_type.gif" alt=""></p>
<h3 id="7-EventBus"><a href="#7-EventBus" class="headerlink" title="7. EventBus"></a>7. EventBus</h3><p>地址：<a href="https://github.com/txadf/EventBus" target="_blank" rel="external">https://github.com/txadf/EventBus</a><br>注意：在使用，进行注册订阅时，使用下面的方式，其中“XXX”表示需要订阅的Activity或者Fragment名，避免直接使用“this”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(XXX.this);</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TabLayout+ViewPager创建tab]]></title>
      <url>http://imtianx.cn/2016/05/28/TabLayout+ViewPager%20create%20tab/</url>
      <content type="html"><![CDATA[<p>在degingn库中有TabLayout控件，可以方便的实现tab切换的效果，配合ViewPager.<br><a id="more"></a><br>如下展示效果：<br><img src="/img/article_img/TabLayout+ViewPager-create-tab.gif" alt=""></p>
<h3 id="1-添加依design赖库"><a href="#1-添加依design赖库" class="headerlink" title="1. 添加依design赖库"></a>1. 添加依design赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:design:23.4.0&apos;</span><br></pre></td></tr></table></figure>
<h3 id="2-编写主布局文件。"><a href="#2-编写主布局文件。" class="headerlink" title="2.编写主布局文件。"></a>2.编写主布局文件。</h3><p>使用TabLayout和ViewPager。TabLayout 有以下三个属性，方便我们设置tab的字体颜色，选中时字体的颜色及指示器的颜色：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app:tabTextColor=&quot;@android:color/black&quot;</span><br><span class="line">app:tabSelectedTextColor=&quot;@color/colorPrimary&quot;</span><br><span class="line">app:tabIndicatorColor=&quot;@color/colorPrimary&quot;</span><br></pre></td></tr></table></figure></p>
<p>具体的使用，如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    tools:context=&quot;cn.imtianx.tablayoutdemo.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.TabLayout</span><br><span class="line">        android:id=&quot;@+id/tab&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:background=&quot;@android:color/white&quot;</span><br><span class="line">        app:tabIndicatorColor=&quot;@color/colorPrimary&quot;</span><br><span class="line">        app:tabSelectedTextColor=&quot;@color/colorPrimary&quot;</span><br><span class="line">        app:tabTextColor=&quot;@android:color/black&quot;&gt;</span><br><span class="line">    &lt;/android.support.design.widget.TabLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v4.view.ViewPager</span><br><span class="line">        android:id=&quot;@+id/container&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.v4.view.ViewPager&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-编写每个tab的布局。"><a href="#3-编写每个tab的布局。" class="headerlink" title="3. 编写每个tab的布局。"></a>3. 编写每个tab的布局。</h3><p>为了简单，根布局仅使用一个 LinearLayout 并给其背景设置了颜色。</p>
<h3 id="4-创建适配器"><a href="#4-创建适配器" class="headerlink" title="4. 创建适配器"></a>4. 创建适配器</h3><p>创建 FragmentAdapter类，继承FragmentPagerAdapter。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by imtianx on 2016-5-27.</span><br><span class="line"> */</span><br><span class="line">public class FragmentAdapter extends FragmentPagerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;String&gt; mTitles; //标题</span><br><span class="line">    private List&lt;Fragment&gt; mFragments;//viewpager 显示的页面</span><br><span class="line"></span><br><span class="line">    public FragmentAdapter(FragmentManager fm, List&lt;String&gt; titles, List&lt;Fragment&gt; fragments) &#123;</span><br><span class="line">        super(fm);</span><br><span class="line">        mTitles = titles;</span><br><span class="line">        mFragments = fragments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Fragment getItem(int position) &#123;</span><br><span class="line">        return mFragments.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getCount() &#123;</span><br><span class="line">        return mFragments.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * tab 标题</span><br><span class="line">     *</span><br><span class="line">     * @param position</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public CharSequence getPageTitle(int position) &#123;</span><br><span class="line">        return mTitles.get(position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-新建fragment页面"><a href="#5-新建fragment页面" class="headerlink" title="5. 新建fragment页面"></a>5. 新建fragment页面</h3><p>创建3个fragment，加载相应的布局。</p>
<h3 id="6-绑定控件"><a href="#6-绑定控件" class="headerlink" title="6.绑定控件"></a>6.绑定控件</h3><p>在MainActicity 中绑定控件，设置adapter。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Fragment&gt; mFragmentList;</span><br><span class="line">    List&lt;String&gt; mTitles;</span><br><span class="line">    TabFragment1 mFragment1;</span><br><span class="line">    TabFragment2 mFragment2;</span><br><span class="line">    TabFragment3 mFragment3;</span><br><span class="line">    FragmentAdapter mAdapter;</span><br><span class="line"></span><br><span class="line">    private TabLayout mTabLayout;</span><br><span class="line">    private ViewPager mViewPager;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initView() &#123;</span><br><span class="line">        mTabLayout = (TabLayout) findViewById(R.id.tab);</span><br><span class="line">        mViewPager = (ViewPager) findViewById(R.id.container);</span><br><span class="line"></span><br><span class="line">        //添加标题</span><br><span class="line">        mTitles = new ArrayList&lt;&gt;();</span><br><span class="line">        mTitles.add(&quot;报价中&quot;);</span><br><span class="line">        mTitles.add(&quot;运输中&quot;);</span><br><span class="line">        mTitles.add(&quot;已完成&quot;);</span><br><span class="line"></span><br><span class="line">        //添加页面</span><br><span class="line">        mFragmentList = new ArrayList&lt;&gt;();</span><br><span class="line">        mFragment1 = new TabFragment1();</span><br><span class="line">        mFragment2 = new TabFragment2();</span><br><span class="line">        mFragment3 = new TabFragment3();</span><br><span class="line">        mFragmentList.add(mFragment1);</span><br><span class="line">        mFragmentList.add(mFragment2);</span><br><span class="line">        mFragmentList.add(mFragment3);</span><br><span class="line"></span><br><span class="line">        //初始化适配器</span><br><span class="line">        mAdapter = new FragmentAdapter(getSupportFragmentManager(),</span><br><span class="line">                mTitles, mFragmentList);</span><br><span class="line">        //设置适配器</span><br><span class="line">        mViewPager.setAdapter(mAdapter);</span><br><span class="line">        //加载viewpager</span><br><span class="line">        mTabLayout.setupWithViewPager(mViewPager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="7-带icon的tab"><a href="#7-带icon的tab" class="headerlink" title="7. 带icon的tab"></a>7. 带icon的tab</h3><p>效果图如下：<br><img src="/img/article_img/TabLayout+ViewPager-create-tab_icon.gif" alt=""></p>
<ul>
<li><p>1.布局基本没有变，只是在上面的布局基础下，将ViewPager和TabLayout的上下位置调换下。添加如下属性将TabLayout的指示条高度设为0，不可见：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:tabIndicatorHeight=&quot;0dp&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.为每个tab添加selector。以第一个tab为例，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item android:drawable=&quot;@drawable/home_pressed&quot; android:state_selected=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;item android:drawable=&quot;@drawable/home_normal&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.IconTabActivity中将定义的selector设置为TabLayout的icon:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mTabLayout.getTabAt(0).setIcon(getResources().getDrawable(R.drawable.tab_hall_bg));</span><br><span class="line">mTabLayout.getTabAt(1).setIcon(getResources().getDrawable(R.drawable.tab_joined_bg));</span><br><span class="line">mTabLayout.getTabAt(2).setIcon(getResources().getDrawable(R.drawable.tab_me_bg));</span><br></pre></td></tr></table></figure>
<p>到此，已经完成了，TabLayout的使用和TabHost的使用类似，但它更为方便，使用起来较为简单。<br><a href="https://github.com/imtianx/StudyDemoForAndroid/blob/master/A03-tablayoutdemo" target="_blank" rel="external">Demo下载</a><br><br>注：demo中,不带icon:的是MainActivity，带icon的是IconTabActivity。可在AndroidManifest切换运行查看</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[属性动画详解（Animator）]]></title>
      <url>http://imtianx.cn/2016/04/25/Property-animatorValueAnimator_ObjectAnimation/</url>
      <content type="html"><![CDATA[<h1 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h1><p>对于之前介绍的Animation，它属于<strong>视图动画</strong>（View Animation）(可参见：<a href="http://imtianx.cn/2016/04/25/view-Animation/">Animation 动画详解</a>)，包括<strong>补间动画</strong>（Tween Animation）和<strong>逐帧动画</strong>（Tween Animation）；而在android中还有另一种动画，那就是<strong>属性动画</strong>（Property Animator），它包括<strong>ValueAnimator</strong> 和 <strong>ObjectAnimator</strong>。<br><a id="more"></a><br>两者的<strong>区别</strong>：</p>
<ul>
<li>引入时间不同<br>视图动画在API Level 1 引入的，而属性动画在API Level 11（即 android 3.0）引入的； </li>
<li>所在包不同<br>视图动画在 <strong>android.view.animation.Animation</strong>包下，属性动画在：<strong>android.animation</strong>包下</li>
<li>动画类的命名不同<br>视图动画中类的名字为：<strong>XXXAnimation</strong>，而在属性动画中是：<strong>XXXAnimator</strong></li>
<li><strong>作用的对象不同</strong>（这个也是引入属性动画的原因）<br><strong>视图动画是对控件做动画，不能改变控件内部的属性，对所有的控件都可以；而属性动画是通过改变控件的属性来实现动画，但使用ObjectAnimator时要求作用的控件的属性要有get,set方法。如果控件的属性没有get/set方法，可以通过包装类间接的设置get/set方法，或者使用ValueAnimator 实现。</strong></li>
</ul>
<h1 id="2、ValueAnimator-的基本使用"><a href="#2、ValueAnimator-的基本使用" class="headerlink" title="2、ValueAnimator 的基本使用"></a>2、ValueAnimator 的基本使用</h1><p>ValueAnimator是动画的核心，但不提供任何动画效果，它更像一个数值发生器，产生具有一定规律的数字，然后让调用者来控制动画的实现过程。用法如下：</p>
<ul>
<li><strong>创建ValueAnimator实例</strong><br>例：创建0到500的动画，时间为1s:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator animator = ValueAnimator.ofInt(0,500);  </span><br><span class="line">animator.setDuration(1000);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>代码中可以看出，它不与任何控件关联，只对动画做运算。</p>
<ul>
<li><p><strong>添加它的监听事件</strong><br>下面是给它添加监听事件，实现动画的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">animator.addUpdateListener(new ValueAnimator.</span><br><span class="line">                       AnimatorUpdateListener() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void onAnimationUpdate(ValueAnimator animation) &#123;</span><br><span class="line">                       //具体处理动画逻辑</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               //开启动画</span><br><span class="line">               animator.start();</span><br></pre></td></tr></table></figure>
<p>具体示例：<br>点击按钮使textView从(200,200)移动到（600，,600）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  btnStartAnim = (Button) findViewById(R.id.btn);</span><br><span class="line">tv = (TextView) findViewById(R.id.tv);</span><br><span class="line">btnStartAnim.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        //设置数据</span><br><span class="line">        ValueAnimator animator = ValueAnimator.ofInt(200, 600);</span><br><span class="line">        animator.setDuration(1000);</span><br><span class="line">        //监听动画</span><br><span class="line">        animator.addUpdateListener(new ValueAnimator.</span><br><span class="line">                AnimatorUpdateListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</span><br><span class="line">                //获取当前动画的值</span><br><span class="line">                int curValue = (int) animation.getAnimatedValue();</span><br><span class="line">                //设置tv的位置</span><br><span class="line">                tv.layout(curValue, curValue,</span><br><span class="line">                        curValue + tv.getWidth(),</span><br><span class="line">                        curValue + tv.getHeight());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //开启动画</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>示例效果：<br><img src="/img/article_img/ValueAnimator-simple-demo.gif" alt=""></p>
<h1 id="3、ValueAnimator-常用方法"><a href="#3、ValueAnimator-常用方法" class="headerlink" title="3、ValueAnimator 常用方法"></a>3、ValueAnimator 常用方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 设置动画参数，参数类型为可变参数</span><br><span class="line">*/</span><br><span class="line">ValueAnimator ofInt(int... values);</span><br><span class="line">ValueAnimator ofFloat(int... values);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 设置动画时长，单位是毫秒</span><br><span class="line">*/</span><br><span class="line">ValueAnimator setDuration(long duration);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 获取 ValueAnimator 在运动时，当前运动点的值</span><br><span class="line">*/</span><br><span class="line">Object getAnimatedValue();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 开始动画</span><br><span class="line">*/</span><br><span class="line">void start();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 设置循环次数,设置为 INFINITE 表示无限循环</span><br><span class="line">*/</span><br><span class="line">void setRepeatCount(int value);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 设置循环模式</span><br><span class="line">* value 取值有 RESTART，REVERSE（分别为：重新开始，倒序重新开始）</span><br><span class="line">*/</span><br><span class="line">void setRepeatMode(int value);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 取消动画</span><br><span class="line">*/</span><br><span class="line">void cancel();</span><br></pre></td></tr></table></figure>
<p>通过源码，发现ofInt和ofFloat方法内部实现一样的，他们的区别在于传入的参数类型不同，需要注意的是在使用<strong>getAnimatedValue</strong>方法时，如果前面<strong>使用的是ofInt,要强转成int 类型</strong>，否则，转为float类型。<br>此外，如果不需要动画，可以调用移除动画监听方法，但需要先调用cancel方法取消动画。</p>
<h1 id="4、ObjectAnimator-的基本使用"><a href="#4、ObjectAnimator-的基本使用" class="headerlink" title="4、ObjectAnimator 的基本使用"></a>4、ObjectAnimator 的基本使用</h1><p>ObjectAnimator 类继承自ValueAnimator，使用时通过静态工厂类直接返回一个对象，参数包括对象和对象的属性名，但该属性必须要有get和set函数，这样可以真实的控制一个view的属性值，因此它基本可以实现所有的动画效果。<br>使用示例：<br>使textView的translationX从0变化到200在变化到500，持续时间为1s,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(textView,</span><br><span class="line">            &quot;translationX&quot;,new float[]&#123;200,500&#125;);</span><br><span class="line">    animator.setDuration(1000);</span><br><span class="line">    animator.start();</span><br></pre></td></tr></table></figure></p>
<p>ofFloat的参数：第一个是要操纵的View；第二个是要操纵的属性；第三个是参数，是一个可变数组。同样的，可以给它设置显示时长，插值器等。<br>在开始提到了，ObjectAnimator用于有get，set属性的控件，对于没有的可以通过一个包装类来实现，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 包装类，给width添加get，set方法</span><br><span class="line"> */</span><br><span class="line">public static class WrapperView &#123;</span><br><span class="line">    private View mTarget;</span><br><span class="line"></span><br><span class="line">    public WrapperView(View target) &#123;</span><br><span class="line">        mTarget = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getWidth() &#123;</span><br><span class="line">        return mTarget.getLayoutParams().width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWidth(int width) &#123;</span><br><span class="line">        mTarget.getLayoutParams().width = width;</span><br><span class="line">        mTarget.requestLayout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用时，直接操纵包装类，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WrapperView mWrapperView = new WrapperView(btnStartAnim);</span><br><span class="line">ObjectAnimator animator = ObjectAnimator.ofInt(</span><br><span class="line">        mWrapperView,&quot;width&quot;,500).setDuration(500);</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure></p>
<p>通过上面，可以知道，ObjectAnimator 实现动画主要是通过set方法来设置控件的对应的属性实现动画。</p>
<h1 id="5、ObjectAnimator-的常用方法"><a href="#5、ObjectAnimator-的常用方法" class="headerlink" title="5、ObjectAnimator 的常用方法"></a>5、ObjectAnimator 的常用方法</h1><p>除了上面的ofInt,ofFloat方法，对于要改变背景色的，可以使用<strong>ArgbEvaluator</strong>，用法如下,给textView设置背景色在三种颜色间变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animator = ObjectAnimator.ofInt(textView,</span><br><span class="line">        &quot;BackgroundColor&quot;,0xffff00ff, 0xffffff00, 0xffff00ff);</span><br><span class="line">animator.setDuration(2000);</span><br><span class="line">animator.setEvaluator(new ArgbEvaluator());</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure></p>
<p>其他常用函数如下：<br>摘抄于：<a href="http://wiki.jikexueyuan.com/project/android-animation/7.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/android-animation/7.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 设置动画时长，单位是毫秒 </span><br><span class="line"> */  </span><br><span class="line">ValueAnimator setDuration(long duration)  </span><br><span class="line">/** </span><br><span class="line"> * 获取 ValueAnimator 在运动时，当前运动点的值 </span><br><span class="line"> */  </span><br><span class="line">Object getAnimatedValue();  </span><br><span class="line">/** </span><br><span class="line"> * 开始动画 </span><br><span class="line"> */  </span><br><span class="line">void start()  </span><br><span class="line">/** </span><br><span class="line"> * 设置循环次数,设置为 INFINITE 表示无限循环 </span><br><span class="line"> */  </span><br><span class="line">void setRepeatCount(int value)  </span><br><span class="line">/** </span><br><span class="line"> * 设置循环模式 </span><br><span class="line"> * value 取值有 RESTART，REVERSE， </span><br><span class="line"> */  </span><br><span class="line">void setRepeatMode(int value)  </span><br><span class="line">/** </span><br><span class="line"> * 取消动画 </span><br><span class="line"> */  </span><br><span class="line">void cancel()</span><br></pre></td></tr></table></figure></p>
<p>监听相关的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 监听器一：监听动画变化时的实时值 </span><br><span class="line"> */  </span><br><span class="line">public static interface AnimatorUpdateListener &#123;  </span><br><span class="line">    void onAnimationUpdate(ValueAnimator animation);  </span><br><span class="line">&#125;  </span><br><span class="line">//添加方法为：public void addUpdateListener(AnimatorUpdateListener listener)  </span><br><span class="line">/** </span><br><span class="line"> * 监听器二：监听动画变化时四个状态 </span><br><span class="line"> */  </span><br><span class="line">public static interface AnimatorListener &#123;  </span><br><span class="line">    void onAnimationStart(Animator animation);  </span><br><span class="line">    void onAnimationEnd(Animator animation);  </span><br><span class="line">    void onAnimationCancel(Animator animation);  </span><br><span class="line">    void onAnimationRepeat(Animator animation);  </span><br><span class="line">&#125;  </span><br><span class="line">//添加方法为：public void addListener(AnimatorListener listener)</span><br></pre></td></tr></table></figure></p>
<p>插值器与 Evaluator:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 设置插值器 </span><br><span class="line"> */  </span><br><span class="line">public void setInterpolator(TimeInterpolator value)  </span><br><span class="line">/** </span><br><span class="line"> * 设置 Evaluator </span><br><span class="line"> */  </span><br><span class="line">public void setEvaluator(TypeEvaluator value)</span><br></pre></td></tr></table></figure></p>
<p>更多方法可以查看api</p>
<h1 id="6、AnimatorSet的使用"><a href="#6、AnimatorSet的使用" class="headerlink" title="6、AnimatorSet的使用"></a>6、AnimatorSet的使用</h1><p>在视图动画中  AnimationSet 来处理混合动画，同样的，这里的AnimatorSet来处理多个动画的。它出了实现多种动画，还可以精确的进行顺序控制。<br>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animator1 = ObjectAnimator.ofFloat(textView, &quot;translationX&quot;, 300);</span><br><span class="line">ObjectAnimator animator2 = ObjectAnimator.ofFloat(textView, &quot;scaleX&quot;, 1, 0, 1);</span><br><span class="line">ObjectAnimator animator3 = ObjectAnimator.ofFloat(textView, &quot;scaleY&quot;, 1, 0, 1);</span><br><span class="line">AnimatorSet animatorSet = new AnimatorSet();</span><br><span class="line">animatorSet.setDuration(1000);</span><br><span class="line">animatorSet.playTogether(animator1, animator2, animator3);</span><br><span class="line">animatorSet.start();</span><br></pre></td></tr></table></figure></p>
<p>示例效果：<br><img src="/img/article_img/AnimatorSet.gif" alt=""></p>
<p>以上示例设置textView在x轴方向移动300，x和y方向先缩小到一倍再还原到一倍三种动画是同时执行。<br>若需要按顺序执行，可以调用Animator的<strong>playSequentially</strong>方法。</p>
<h1 id="7、PropertyValuesHolder-的使用"><a href="#7、PropertyValuesHolder-的使用" class="headerlink" title="7、PropertyValuesHolder 的使用"></a>7、PropertyValuesHolder 的使用</h1><p>除了上面讲的AnimatorSet 实现多种动画，还可以通过PropertyValuesHolder来实现，比如上面的例子在平移的过程中实现x,y轴的缩放。如下代码;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PropertyValuesHolder valuesHolder1 = PropertyValuesHolder</span><br><span class="line">    .ofFloat(&quot;translationX&quot;, 300);</span><br><span class="line">PropertyValuesHolder valuesHolder2 = PropertyValuesHolder</span><br><span class="line">    .ofFloat(&quot;scaleX&quot;, 1, 0, 1);</span><br><span class="line">PropertyValuesHolder valuesHolder3 = PropertyValuesHolder</span><br><span class="line">    .ofFloat(&quot;scaleY&quot;, 1, 0, 1);</span><br><span class="line">ObjectAnimator.ofPropertyValuesHolder(tv, valuesHolder1,</span><br><span class="line">    valuesHolder2, valuesHolder3).setDuration(1000).start();</span><br></pre></td></tr></table></figure></p>
<p>运行效果同AnimatorSet中的示例。<br>它的实现是先分别用PropertyValuesHolder的对象来控制不同的属性，最后调用ofPropertyValuesHolder方法实现多个属性动画的共同作用。</p>
<h1 id="8、在XML文件中实现属性动画"><a href="#8、在XML文件中实现属性动画" class="headerlink" title="8、在XML文件中实现属性动画"></a>8、在XML文件中实现属性动画</h1><p>先在xml文件中定义属性，如下示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    android:duration=1000&quot;</span><br><span class="line">    android:propertyName=&quot;scaleX&quot;</span><br><span class="line">    android:valueFrom=&quot;1.0&quot;</span><br><span class="line">    android:valueTo=&quot;2.0&quot;</span><br><span class="line">    android:valueType=&quot;floatType&quot;</span><br><span class="line">&lt;/objectAnimator&gt;</span><br></pre></td></tr></table></figure></p>
<p>在java代码代码中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Animator animator = AnimatorInflater.</span><br><span class="line">        loadAnimator(MainActivity.this,</span><br><span class="line">        R.animator.scalex);</span><br><span class="line">animator.setTarget(tv);</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是，xml文件的定义需要放在res/animator下，而且根节点只能是：set,objectAnimator,valueAnimator三者之一。如果使用的set，可以为其指定播放的方式，属性名为：ordering=[“together”]|[“sequentially”]，<br>默认值为：“together”，对于其他具体的属性这里不再赘述了，可以参见文档。<br>在实际开发中建议使用代码实现动画，比较简单，而且很多时候某些属性的起始值无法确定。</p>
<h1 id="8、View的animate方法"><a href="#8、View的animate方法" class="headerlink" title="8、View的animate方法"></a>8、View的animate方法</h1><p>在android3.0之后，添加了animate方法来直接驱动属性动画，它其实是对属性动画的简写，如下示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">view.animate()</span><br><span class="line">       .alpha(0)</span><br><span class="line">       .y(300)</span><br><span class="line">       .setDuration(1000)</span><br><span class="line">       .withStartAction(new Runnable() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void run() &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       .withEndAction(new Runnable() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void run() &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).start();</span><br></pre></td></tr></table></figure></p>
<p>上面的例子很好理解，可以通过属性来确定他的含义。<br>总之，在实现动画时，可以根据自己的实际情况选择相应的方式实现动画，必要的时候还可以自定义实现动画，往往在使用时，不只是一种动画，我们要选择合适的方式实现多种动画。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Animation 动画详解]]></title>
      <url>http://imtianx.cn/2016/04/25/view-Animation/</url>
      <content type="html"><![CDATA[<p>在android 开发中，适当的添加动画可以使界面的交互变得更加的友好，特别是在提示，引导类的场景中，合理的使用动画可以带来更好的用户体验。这里，介绍<strong>Animation</strong> 框架的用法。<a id="more"></a></p>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在 Animation动画框架中提供了四中动画方式，分别为：</p>
<ul>
<li>透明    <a href="https://developer.android.com/reference/android/view/animation/AlphaAnimation.html" target="_blank" rel="external">AlphaAnimation</a></li>
<li>旋转    <a href="https://developer.android.com/reference/android/view/animation/RotateAnimation.html" target="_blank" rel="external">RotateAnimation</a></li>
<li>缩放    <a href="https://developer.android.com/reference/android/view/animation/ScaleAnimation.html" target="_blank" rel="external">ScaleAnimation</a></li>
<li>平移   <a href="https://developer.android.com/reference/android/view/animation/TranslateAnimation.html" target="_blank" rel="external">TranslateAnimation</a><br>此外，还提供了<a href="https://developer.android.com/reference/android/view/animation/AnimationSet.html" target="_blank" rel="external">AnimationSet</a>动画集合，混合使用多种动画。<br>它们对应的 <strong>xml</strong>  的标签分别为：<strong>alpha,rotate,scale,translate和set。</strong><br><strong>Animation</strong>是他们的基类，有如下的标签和对应的函数：<br><strong>android:duration setDuration(long)</strong> 动画持续时间，以毫秒为单位<br><strong>android:fillAfter setFillAfter(boolean)</strong> 如果设置为 true，控件动画结束时，将保持动画最后时的状态<br><strong>android:fillBefore setFillBefore(boolean)</strong> 如果设置为 true,控件动画结束时，还原到开始动画前的状态<br><strong>android:fillEnabled setFillEnabled(boolean)</strong> 与 android:fillBefore 效果相同，都是在动画结束时，将控件还原到初始化状态<br><strong>android:repeatCount setRepeatCount(int)</strong> 重复次数<br><strong>android:repeatMode setRepeatMode(int)</strong> 重复类型，有 reverse 和 restart 两个值，取值为 RESTART 或 REVERSE，必须与 repeatCount 一起使用才能看到效果。因为这里的意义是重复的类型，即回放时的动作。<br><strong>android:interpolator setInterpolator(Interpolator)</strong> 设定插值器，其实就是指定的动作效果，比如弹跳效果等</li>
</ul>
<h2 id="2-Interpolator-插值器"><a href="#2-Interpolator-插值器" class="headerlink" title="2. Interpolator 插值器"></a>2. Interpolator 插值器</h2><p>对于动画，它的速率变化有快又慢，谷歌给出了<strong>插值器</strong>，来方便我们控制动画的变化。在不同的插值器的作用下，其变化也不一样。官方给的插值器有（谷歌官方）：<br><img src="/img/article_img/Interpolator.jpg" alt=""><br>部分资源id为(改图来自网络)：<br><img src="/img/article_img/Interpolator-resource-id.png" alt=""></p>
<h2 id="3-xm实现动画"><a href="#3-xm实现动画" class="headerlink" title="3. xm实现动画"></a>3. xm实现动画</h2><p>以<strong>scale</strong>标签为例，其他类似。scale有以下几个属性：</p>
<ul>
<li><strong>android:fromXScale</strong> 起始的 X方向上相对自身的缩放比例，浮点值，比如 1.0 代表自身无变化，0.5 代表起始时缩小一倍，2.0 代表放大一倍；</li>
<li><strong>android:toXScale</strong> 结尾的 X 方向上相对自身的缩放比例，浮点值；</li>
<li><strong>android:fromYScale</strong> 起始的 Y方向上相对自身的缩放比例，浮点值，</li>
<li><strong>android:toYScale</strong> 结尾的 Y 方向上相对自身的缩放比例，浮点值；</li>
<li><strong>android:pivotX</strong> 缩放起点 X 轴坐标，可以是数值、百分数、百分数 p。 三种样式，比如 50、50%、50%p，当为数值时，表示在当前 View的左上角，即原点处加上 50px，做为起始缩放点；如果是 50%，表示在当前控件的左上角加上自己宽度的 50%做为起始点；如果是 50%p，那么就是表示在当前的左上角加上父控件宽度的 50%做为起始点 x 轴坐标。</li>
<li><strong>android:pivotY</strong> 缩放起点 Y 轴坐标，取值及意义跟android:pivotX 一样。</li>
<li><strong>android:interpolator</strong> 就是添加的插值器，通过不同的Resource ID引用不同的插值器类。</li>
<li><strong>android：fillAfter</strong> 保持动画结束的状态，同样的可以保存初始化状态（<strong>fileBefore</strong>）</li>
<li><strong>android:repeatMode</strong> 设定回放类型，重新开始/倒退（restart /reverse）<br>在res下新建anim 文件夹，新建scaleanim.xml文件，如下代码（宽高从0放大到1.5倍，开开始和结束速度慢，中间快，停留在结束状态，重复一次）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;scale</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;</span><br><span class="line">    android:fromXScale=&quot;0.0&quot;</span><br><span class="line">    android:fromYScale=&quot;0.0&quot;</span><br><span class="line">    android:pivotX=&quot;50&quot;</span><br><span class="line">    android:pivotY=&quot;50&quot;</span><br><span class="line">    android:toXScale=&quot;1.5&quot;</span><br><span class="line">    android:toYScale=&quot;1.5&quot;</span><br><span class="line">    android：fillAfter=&quot;true&quot;</span><br><span class="line">    android:repeatCount=&quot;1&quot;  </span><br><span class="line">    android:repeatMode=&quot;restart&quot;  &gt;</span><br><span class="line">&lt;/scale&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>上面定义好了动画，下面就是具体的使用，这里以给textView设置上面的scale动画为例，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animation mAnimation = AnimationUtils.loadAnimation(this,R.anim.scaleanim);</span><br><span class="line">    textView.startAnimation(mAnimation);</span><br></pre></td></tr></table></figure></p>
<p>注：对于其他的标签及其属性可以参见<a href="https://developer.android.com/reference/android/view/animation/Animation.html" target="_blank" rel="external">官方文档</a>,这些标签可以放在一个<strong>set标签</strong>中，来定义动画集合。</p>
<h2 id="4-java-代码实现动画"><a href="#4-java-代码实现动画" class="headerlink" title="4. java 代码实现动画"></a>4. java 代码实现动画</h2><p>这里以<strong>AlphaAnimation</strong>为例，若xml代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;  </span><br><span class="line">    android:interpolator=&quot;@android:anim/bounce_interpolator&quot;</span><br><span class="line">    android:fromAlpha=&quot;1.0&quot;  </span><br><span class="line">    android:toAlpha=&quot;0.1&quot;  </span><br><span class="line">    android:duration=&quot;3000&quot;  </span><br><span class="line">    android:fillBefore=&quot;true&quot;&gt;  </span><br><span class="line">&lt;/alpha&gt;</span><br></pre></td></tr></table></figure></p>
<p>与其有相同效果的java代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alphaAnim = new AlphaAnimation(1.0f,0.1f);  </span><br><span class="line">alphaAnim.setDuration(3000);  </span><br><span class="line">alphaAnim.setFillBefore(true); </span><br><span class="line">alphaAnim.setInterpolator(new BounceInterpolator());//设置插值器</span><br></pre></td></tr></table></figure></p>
<p> 最后，就是给相应的控件设置动画，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textView.startAnimation(alphaAnim);</span><br></pre></td></tr></table></figure></p>
<h2 id="5-动画回调监听事件"><a href="#5-动画回调监听事件" class="headerlink" title="5. 动画回调监听事件"></a>5. 动画回调监听事件</h2><p>对于上面的两中方法设置动画，可以添加相应的监听回调，获得动画的开始，结束和重复事件，并对不同的事件作出相应的处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mAnimation.setAnimationListener(new Animation.AnimationListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onAnimationStart(Animation animation) &#123;</span><br><span class="line">            //动画开始前的回调处理</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void onAnimationEnd(Animation animation)&#123;</span><br><span class="line">            //动画结束时的回调处理</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void onAnimationRepeat(Animation animation) &#123;</span><br><span class="line">            //动画重复的回调处理</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>更多：<a href="http://imtianx.cn/2016/04/25/Property-animatorValueAnimator&amp;ObjectAnimation">属性动画（ValueAnimator 和 ObjectAnimation）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwipeRefreshLayout+RecyclerView实现下拉刷新]]></title>
      <url>http://imtianx.cn/2016/04/23/SwipeRefreshLayout-RecyclerView/</url>
      <content type="html"><![CDATA[<p>SwipeRefreshLayout+RecyclerView实现下拉刷新<br>另外还使用了CardView（一个容器类布局，它继承自FrameLayout）。<br><a id="more"></a><br>效果图如下：<br><img src="http://img.blog.csdn.net/20160411115226554" alt="这里写图片描述"></p>
<h2 id="具体的使用："><a href="#具体的使用：" class="headerlink" title="具体的使用："></a>具体的使用：</h2><h4 id="1-CardView"><a href="#1-CardView" class="headerlink" title="1.CardView"></a>1.CardView<br></h4><p>首先，引入依赖：<br><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:cardview-v7:23.3.0&apos;</span><br></pre></td></tr></table></figure></p>
<p> 接着，在布局中引用，需要添加新的名字空间<br><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br></pre></td></tr></table></figure></p>
<p> 通过名字空间添加两个新的属性,通过名字很容易知道，第一个是设置背景颜色，第二个是设置圆角<br><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">card_view:cardBackgroundColor=&quot;#b911e8&quot;</span><br><span class="line">card_view:cardCornerRadius=&quot;4dp&quot;</span><br></pre></td></tr></table></figure></p>
<p>这里，RecyclerView 的每一个item都是一个CardView<br><br></p>
<h4 id="2-SwipeRefreshLayout"><a href="#2-SwipeRefreshLayout" class="headerlink" title="2.SwipeRefreshLayout"></a>2.SwipeRefreshLayout</h4><p>它在V4 包下，使用代码如下：<a href="https://github.com/imtianx/StudyDemoForAndroid/blob/master/A02-swrvdemo%2Fsrc%2Fmain%2Fres%2Flayout%2Factivity_main.xml" target="_blank" rel="external">activity_main.xml</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.v4.widget.SwipeRefreshLayout</span><br><span class="line">xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">android:id=&quot;@+id/swipe_container&quot;</span><br><span class="line">android:layout_width=&quot;match_parent&quot;</span><br><span class="line">android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;android.support.v7.widget.RecyclerView</span><br><span class="line">android:layout_width=&quot;match_parent&quot;</span><br><span class="line">android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">android:id=&quot;@+id/relv&quot;&gt;</span><br><span class="line">&lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</span><br></pre></td></tr></table></figure>
<p>在activity中设置相关的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//设置进度条颜色,最多可以有四个颜色</span><br><span class="line">setColorSchemeResources(int… colorResIds);</span><br><span class="line">//设置进度圈背景颜色</span><br><span class="line">setProgressBackgroundColorSchemeColor(int color);</span><br><span class="line">//设置监听,在OnRefresh()中处理结果</span><br><span class="line">setOnRefreshListener(SwipeRefreshLayout.OnRefreshListener);</span><br><span class="line">//设置刷新状态</span><br><span class="line">setRefreshing(Boolean refreshing);</span><br></pre></td></tr></table></figure></p>
<h4 id="3-RecyclerView"><a href="#3-RecyclerView" class="headerlink" title="3.RecyclerView"></a>3.RecyclerView</h4><p>它是谷歌对ListView的升级，效率更高，并对ViewHolder进行了封装。使用时，同样，需要依赖库:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:recyclerview-v7:23.3.0&apos;</span><br></pre></td></tr></table></figure></p>
<p>编写自己的adapter，继承自 RecyclerView.Adapter ，实现三个方法：(具体内容见：<a href="https://github.com/imtianx/StudyDemoForAndroid/blob/master/A02-swrvdemo%2Fsrc%2Fmain%2Fjava%2Fcn%2Fimtianx%2Fswrvdemo%2FRvAdapter.java" target="_blank" rel="external">RvAdapter.java</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将布局转换成view 并传递给RecyclerView 封装好的 ViewHolder</span><br><span class="line"> *</span><br><span class="line"> * @param parent</span><br><span class="line"> * @param viewType</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</span><br><span class="line">    View view = LayoutInflater.from(parent.getContext()).inflate(</span><br><span class="line">            R.layout.rv_item_cardview, parent, false);</span><br><span class="line">    return new ViewHolder(view);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 建立ViewHolder中视图与数据的关联</span><br><span class="line"> *</span><br><span class="line"> * @param holder</span><br><span class="line"> * @param position</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void onBindViewHolder(ViewHolder holder, int position) &#123;</span><br><span class="line">    holder.imageView.setImageResource(R.mipmap.img);</span><br><span class="line">    holder.textView.setText(datas.get(position));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>添加内部内ViewHolder继承自RecyclerView.ViewHolder, 由于android没有给RecyclerView设置点击事件，需要我们自己使用接口回调，设置监听。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class ViewHolder extends RecyclerView.ViewHolder</span><br><span class="line">&#123;</span><br><span class="line">    public ImageView imageView;</span><br><span class="line">    public TextView textView;</span><br><span class="line"></span><br><span class="line">    public ViewHolder (final View itemView)</span><br><span class="line">    &#123;</span><br><span class="line">        super (itemView);</span><br><span class="line">        imageView = (ImageView) itemView.findViewById (R.id.img_head);</span><br><span class="line">        textView = (TextView) itemView.findViewById (R.id.tv_title);</span><br><span class="line"></span><br><span class="line">        itemView.setOnClickListener (new View.OnClickListener()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick (View v)</span><br><span class="line">            &#123;</span><br><span class="line">                itemClickListener.onItemClick (v, getPosition() );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        textView.setOnClickListener (</span><br><span class="line">            new View.OnClickListener()</span><br><span class="line">        &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick (View v)</span><br><span class="line">            &#123;</span><br><span class="line">                if (itemClickListener != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    itemClickListener.onTextClick (v, getPosition() );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public OnItemClickListener itemClickListener;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 设置接口</span><br><span class="line"> *</span><br><span class="line"> * @param itemClickListener</span><br><span class="line"> */</span><br><span class="line">public void setItemClickListener (OnItemClickListener itemClickListener)</span><br><span class="line">&#123;</span><br><span class="line">    this.itemClickListener = itemClickListener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 点击事件接口</span><br><span class="line"> */</span><br><span class="line">public interface OnItemClickListener</span><br><span class="line">&#123;</span><br><span class="line">    //item的点击事件</span><br><span class="line">    void onItemClick (View view, int position);</span><br><span class="line">    //item中文字的点击事件</span><br><span class="line">    void onTextClick (View view, int position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后在activity中设置监听，具体见：<a href="https://github.com/imtianx/StudyDemoForAndroid/blob/master/A02-swrvdemo/src/main/java/cn/imtianx/swrvdemo/MainActivity.java" target="_blank" rel="external">MainActivity.java</a></p>
<p> <strong><a href="https://github.com/imtianx/StudyDemoForAndroid/tree/master/A02-swrvdemo" target="_blank" rel="external">demon地址</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Gradle发布项目到JCenter仓库]]></title>
      <url>http://imtianx.cn/2016/04/23/put-libary-to-jcenter/</url>
      <content type="html"><![CDATA[<p>原文：<a href="http://zhengxiaopeng.com/2015/02/02/%E4%BD%BF%E7%94%A8Gradle%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0JCenter%E4%BB%93%E5%BA%93/" target="_blank" rel="external">使用Gradle发布项目到JCenter仓库</a><br>这里介绍了使用gradle发布项目到jcenter的具体流程，方便项目的依赖。<br><a id="more"></a></p>
<h3 id="申请Bintray账号"><a href="#申请Bintray账号" class="headerlink" title="申请Bintray账号"></a>申请Bintray账号</h3><p>Bintray的基本功能类似于Maven Central，一样的我们需要一个账号，<a href="https://bintray.com/" target="_blank" rel="external">Bintray传送门</a>，注册完成后第一步算完成了。</p>
<h3 id="生成项目的JavaDoc和source-JARs"><a href="#生成项目的JavaDoc和source-JARs" class="headerlink" title="生成项目的JavaDoc和source JARs"></a>生成项目的JavaDoc和source JARs</h3><p>简单的说生成的这两样东西就是我们在下一步中上传到远程仓库JCenter上的文件了。这一步需要android-maven-plugin插件，所以我们需要在项目的build.gradle（Top-level build file，项目最外层的build.gradle文件）中添加这个构建依赖，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:1.0.0&apos;</span><br><span class="line">        classpath &apos;com.github.dcendents:android-maven-plugin:1.2&apos;</span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注：如果编译出现问题 ，可将maven 的依赖改为1.3，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath &apos;com.github.dcendents:android-maven-plugin:1.3&apos;</span><br></pre></td></tr></table></figure></p>
<p>然后在你需要发布的那个module（我这里的即是library）的build.gradle里配置如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.library&apos;</span><br><span class="line">apply plugin: &apos;com.github.dcendents.android-maven&apos;</span><br><span class="line">apply plugin: &apos;com.jfrog.bintray&apos;</span><br><span class="line">// This is the library version used when deploying the artifact</span><br><span class="line">version = &quot;1.0.0&quot;</span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 21</span><br><span class="line">    buildToolsVersion &quot;21.1.2&quot;</span><br><span class="line">    resourcePrefix &quot;bounceprogressbar__&quot;    //这个随便填</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion 9</span><br><span class="line">        targetSdkVersion 21</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName version</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">    compile &apos;com.nineoldandroids:library:2.4.0+&apos;</span><br><span class="line">&#125;</span><br><span class="line">def siteUrl = &apos;https://github.com/zhengxiaopeng/BounceProgressBar&apos; // 项目的主页</span><br><span class="line">def gitUrl = &apos;https://github.com/zhengxiaopeng/BounceProgressBar.git&apos; // Git仓库的url</span><br><span class="line">group = &quot;org.rocko.bpb&quot; // Maven Group ID for the artifact，一般填你唯一的包名</span><br><span class="line">install &#123;</span><br><span class="line">    repositories.mavenInstaller &#123;</span><br><span class="line">        // This generates POM.xml with proper parameters</span><br><span class="line">        pom &#123;</span><br><span class="line">        project &#123;</span><br><span class="line">        packaging &apos;aar&apos;</span><br><span class="line">        // Add your description here</span><br><span class="line">        name &apos;Android BounceProgressBar Widget&apos; //项目描述</span><br><span class="line">        url siteUrl</span><br><span class="line">        // Set your license</span><br><span class="line">        licenses &#123;</span><br><span class="line">            license &#123;</span><br><span class="line">            name &apos;The Apache Software License, Version 2.0&apos;</span><br><span class="line">            url &apos;http://www.apache.org/licenses/LICENSE-2.0.txt&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        developers &#123;</span><br><span class="line">        developer &#123;</span><br><span class="line">        id &apos;zhengxiaopeng&apos;    //填写的一些基本信息</span><br><span class="line">        name &apos;Rocko&apos;</span><br><span class="line">        email &apos;zhengxiaopeng.china@gmail.com&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scm &#123;</span><br><span class="line">        connection gitUrl</span><br><span class="line">        developerConnection gitUrl</span><br><span class="line">        url siteUrl</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task sourcesJar(type: Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier = &apos;sources&apos;</span><br><span class="line">&#125;</span><br><span class="line">task javadoc(type: Javadoc) &#123;</span><br><span class="line">    source = android.sourceSets.main.java.srcDirs</span><br><span class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">&#125;</span><br><span class="line">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class="line">    classifier = &apos;javadoc&apos;</span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line">Properties properties = new Properties()</span><br><span class="line">properties.load(project.rootProject.file(&apos;local.properties&apos;).newDataInputStream())</span><br><span class="line">bintray &#123;</span><br><span class="line">    user = properties.getProperty(&quot;bintray.user&quot;)</span><br><span class="line">    key = properties.getProperty(&quot;bintray.apikey&quot;)</span><br><span class="line">    configurations = [&apos;archives&apos;]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = &quot;maven&quot;    </span><br><span class="line">        name = &quot;BounceProgressBar&quot;    //发布到JCenter上的项目名字</span><br><span class="line">        websiteUrl = siteUrl</span><br><span class="line">        vcsUrl = gitUrl</span><br><span class="line">        licenses = [&quot;Apache-2.0&quot;]</span><br><span class="line">        publish = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>配置好上述后需要在你的项目的根目录上的local.properties文件里（一般这文件需gitignore，防止泄露账户信息）配置你的bintray账号信息，your_user_name为你的用户名，your_apikey为你的账户的apikey，可以点击进入你的账户信息里再点击Edit即有查看API Key的选项，把他复制下来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bintray.user=your_user_name</span><br><span class="line">bintray.apikey=your_apikey</span><br></pre></td></tr></table></figure></p>
<p>Rebuild一下项目，顺利的话，就可以在module里的build文件夹里生成相关文件了。这一步为止，就可以把你项目生成到本地的仓库中了，Android Studio中默认即在Android\sdk\extras\android\m2repository这里，所以我们可以通过如下命令(Windows中，可能还需要下载一遍Gradle，之后就不需要了)执行生成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew install</span><br></pre></td></tr></table></figure></p>
<h3 id="上传到Bintray"><a href="#上传到Bintray" class="headerlink" title="上传到Bintray"></a>上传到Bintray</h3><p>上传到Bintray需要gradle-bintray-plugin的支持，所以在最外层的build.gradle里添加构建依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:1.0.0&apos;</span><br><span class="line">        classpath &apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0&apos;</span><br><span class="line">        classpath &apos;com.github.dcendents:android-maven-plugin:1.2&apos;</span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Rebuild一下，然后执行如下命令(Windows中)完成上传：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew bintrayUpload</span><br></pre></td></tr></table></figure></p>
<p>上传完成即可在Bintray网站上找到你的Repo，我们需要完成最后一步工作，<strong>申请你的Repo添加到JCenter</strong>。可以进入这个页面,输入你的项目名字点击匹配到的项目，然后写一写Comments再send即可，然后就等管理员批准了，我是大概等了40分钟，然后网站上会给你一条通过信息，然后就OK了，大功告成。在bintray的maven厂库中即可查看。此外，如果添加其他版本的，可以按照上述步骤操作，注意改版本号。<br>如下bintray厂库详情：<br><img src="http://img.blog.csdn.net/20160404173839075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>最后在其他项目中引用：</p>
<p>1.使用Gradle：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;org.rocko.bpb:library:1.0.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.使用maven：<br>按图中操作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android真机测试之offline或unauthorized错误]]></title>
      <url>http://imtianx.cn/2016/04/23/erroe-of-offline-or-unauthorized/</url>
      <content type="html"><![CDATA[<p>在开发中，使用真机测试较为方便，然而在ide连接手机时，adb device 提示 <strong>offline</strong> 或者 <strong>unauthorized</strong>(中文：未授权的)会令大家非常困扰。<a id="more"></a>我也同样为此而浪费了很多时间。这里，介绍一种较为方便的解决方法（亲测有效）：<br>先删除.android 文件夹下的adbkey文件夹,再连接数据线，让其重新授权。<br>对于.android 文件夹，一般在电脑c盘的用户/用户名 下，它是用于存放android虚拟机的。如果将sdk配置到了环境变量中，则.android文件夹在相应的sdk目录下。<br>此外，网上还有其他的方法，不过都没有解决：</p>
<ol>
<li>用数据线连接手机，在设备管理器中把手机的驱动卸载了，然后重启，重新连接数据线；</li>
<li>打开手机设置，进入 开发人员选项，关闭 usb调试 ，撤销usb授权，最后重新打开；</li>
<li>重启adb：①在编辑器中重启或者关掉编辑器，同时在任务管理器中结束adb.exe;<br>②使用命令行：windows下，（win+R）–&gt;cmd 进入命令行，输入一次以下命令：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server;</span><br><span class="line">adb start-server;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用第三方的软件，如豌豆荚（曾经用过，可用）<br>总之，不同的人有不同的方法，选择一种自己可以接受的，能够有效解决问题就行。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ListView的优化技巧]]></title>
      <url>http://imtianx.cn/2016/04/23/listview-optimize/</url>
      <content type="html"><![CDATA[<p>在实际的应用开发时，往往有很多地方需要使用listview,当然我们得了解它的一些技巧。<a id="more"></a></p>
<h3 id="1-ListView的优化技巧"><a href="#1-ListView的优化技巧" class="headerlink" title="1.ListView的优化技巧"></a>1.ListView的优化技巧</h3><p>主要使用ViewHolder来提高效率，利用它的视图缓存机制，避免每次在调用方getView()方法时通过findViewById()实例化控件。使用时，只需在自定义的adapter中定义内部类ViewHolder，将ListView的item中的控件作为其成员变量。</p>
<p>如下getView()方法：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public View getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line">     ViewHolder holder = null;</span><br><span class="line">       // 判断是否缓存</span><br><span class="line">       if (convertView == null) &#123;</span><br><span class="line">           holder = new ViewHolder();</span><br><span class="line">           // 通过LayoutInflater实例化布局</span><br><span class="line">           convertView = mInflater.inflate(R.layout.notify_item, null);</span><br><span class="line">           holder.img = (ImageView) convertView.findViewById(R.id.imageView);</span><br><span class="line">           holder.title = (TextView) convertView.findViewById(R.id.textView);</span><br><span class="line">           convertView.setTag(holder);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           // 通过tag找到缓存的布局</span><br><span class="line">           holder = (ViewHolder) convertView.getTag();</span><br><span class="line">       &#125;</span><br><span class="line">       // 设置布局中控件要显示的视图</span><br><span class="line">       holder.img.setBackgroundResource(R.drawable.ic_launcher);</span><br><span class="line">       holder.title.setText(mData.get(position));</span><br><span class="line">       return convertView;</span><br><span class="line">   &#125;</span><br><span class="line">//定义内部类</span><br><span class="line">   public final class ViewHolder &#123;</span><br><span class="line">       public ImageView img;</span><br><span class="line">       public TextView title;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-ListView的常用属性"><a href="#2-ListView的常用属性" class="headerlink" title="2.ListView的常用属性"></a>2.ListView的常用属性</h3><p>设置分割线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:divider=&quot;@null&quot;</span><br></pre></td></tr></table></figure></p>
<p>隐藏滚动条<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:scrollbars=&quot;none&quot;</span><br></pre></td></tr></table></figure></p>
<p>设置要显示在第N项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//瞬间完成</span><br><span class="line">listView.setSelection(N);</span><br><span class="line">//平滑完成</span><br><span class="line">listView.smoothScrollBy(distance,duration);</span><br><span class="line">listView.smoothScrollByOffset(offset);</span><br><span class="line">listView.smoothScrollToPosition(n);</span><br></pre></td></tr></table></figure></p>
<p>动态修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//改变llist后调用</span><br><span class="line">mAdapter.notifyDataSetChanged();</span><br></pre></td></tr></table></figure></p>
<h3 id="3-动态改变ListView的布局"><a href="#3-动态改变ListView的布局" class="headerlink" title="3.动态改变ListView的布局"></a>3.动态改变ListView的布局</h3><p>如：实现聊天界面，加载连个布局的。<br>主要是比普通的adapter多实现getItemViewType()和getViewType()两个方法，然后再getView()中作出相应的处理。<br>如下部分主要代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//返回第position个item是何种类型</span><br><span class="line">    @Override</span><br><span class="line">    public int getItemViewType(int position) &#123;</span><br><span class="line">        ChatItemListViewBean bean = mData.get(position);</span><br><span class="line">        return bean.getType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	//返回不同布局的总数</span><br><span class="line">    @Override</span><br><span class="line">    public int getViewTypeCount() &#123;</span><br><span class="line">        return 2;</span><br><span class="line">    &#125;&lt;/span&gt;</span><br><span class="line">	</span><br><span class="line">    @Override</span><br><span class="line">    public View getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line">        ViewHolder holder;</span><br><span class="line">        if (convertView == null) &#123;</span><br><span class="line">			//判断布局类型</span><br><span class="line">            if (getItemViewType(position) == 0) &#123;</span><br><span class="line">                holder = new ViewHolder();</span><br><span class="line">                convertView = mInflater.inflate(</span><br><span class="line">                        R.layout.chat_item_itemin, null);</span><br><span class="line">                holder.icon = (ImageView) convertView.findViewById(</span><br><span class="line">                        R.id.icon_in);</span><br><span class="line">                holder.text = (TextView) convertView.findViewById(</span><br><span class="line">                        R.id.text_in);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                holder = new ViewHolder();</span><br><span class="line">                convertView = mInflater.inflate(</span><br><span class="line">                        R.layout.chat_item_itemout, null);</span><br><span class="line">                holder.icon = (ImageView) convertView.findViewById(</span><br><span class="line">                        R.id.icon_out);</span><br><span class="line">                holder.text = (TextView) convertView.findViewById(</span><br><span class="line">                        R.id.text_out);</span><br><span class="line">            &#125;</span><br><span class="line">            convertView.setTag(holder);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            holder = (ViewHolder) convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        holder.icon.setImageBitmap(mData.get(position).getIcon());</span><br><span class="line">        holder.text.setText(mData.get(position).getText());</span><br><span class="line">        return convertView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>此外，ListView还能设置滑动监听，有OnTouchListener和OnScrollListener监听事件。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ScrollView嵌套ListView的解决方案]]></title>
      <url>http://imtianx.cn/2016/04/23/listView-in-scrollView/</url>
      <content type="html"><![CDATA[<p>在android开发中，有时会遇到ScrollView嵌套ListView的相关问题，然而直接使用ScrollView 嵌套ListView，会导致界面卡顿无法滚动，或者listview只希显示1行（设置lisview的高度为400dp课以解决）。<a id="more"></a>网上也有不同的解决方案，但主要有以下几种。</p>
<h3 id="1、不使用ScrollView"><a href="#1、不使用ScrollView" class="headerlink" title="1、不使用ScrollView"></a>1、不使用ScrollView</h3><p>这种做法是直接将scrollview中除lisview的部分单独写到一个布局文件中，将其加入到listview的头部（即：position==0 的位置）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listView.addHeaderView(LayoutInflater.from(getApplicationContext()).</span><br><span class="line">					inflate(R.layout.list_top_view, null));</span><br><span class="line">或者在adapter的getview中加：</span><br><span class="line">if(position==0)</span><br><span class="line">&#123;</span><br><span class="line">        convertView = LayoutInflater.from(context).inflate(R.layout.list_top_view, null);</span><br><span class="line">	return convertView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注：“这种方法不推荐使用，使用它就破会listview 使用ViewHolder的结构，不能达到优化的目的。</p>
<h3 id="2、动态测量ListView"><a href="#2、动态测量ListView" class="headerlink" title="2、动态测量ListView"></a>2、动态测量ListView</h3><p>在执行完listView.setAdapter(myAdapter);后调用下面的方法；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">	/** 动态设置ListView的高度</span><br><span class="line">	 * @param listView</span><br><span class="line">	 */</span><br><span class="line">	public  void setListViewHeightBasedOnChildren(ListView listView) &#123;</span><br><span class="line">		if(listView == null) return;</span><br><span class="line">		ListAdapter listAdapter = listView.getAdapter();</span><br><span class="line">		if (listAdapter == null) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		int totalHeight = 0;</span><br><span class="line">		for (int i = 0; i &lt; listAdapter.getCount(); i++) &#123;</span><br><span class="line">			View listItem = listAdapter.getView(i, null, listView);</span><br><span class="line">			listItem.measure(0, 0);</span><br><span class="line">			totalHeight += listItem.getMeasuredHeight();</span><br><span class="line">		&#125;</span><br><span class="line">		ViewGroup.LayoutParams params = listView.getLayoutParams();</span><br><span class="line">		params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));</span><br><span class="line">		listView.setLayoutParams(params);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是这样，界面显示的是以listview开始的，他上的内容不会显示，需手动设置ScrollView定位到顶部，或者让listview失去焦点（listView.setFocusable(false);）也可显示顶部内容。<br>scrollView定位到顶部代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrollView.smoothScrollTo(0, 20);</span><br><span class="line">scrollView.fullScroll(ScrollView.FOCUS_UP);//此处无效</span><br><span class="line">scrollView.scrollTo(0, 0);//此处无效</span><br></pre></td></tr></table></figure></p>
<p>注：这种方法不用更改控件，但是它必须要求getview返回的view的布局是LinearLayout的，否则会抛出异常，而且使用时，会把所有lisview的所有item 绘制出来。</p>
<h3 id="3、自定义ListView"><a href="#3、自定义ListView" class="headerlink" title="3、自定义ListView"></a>3、自定义ListView</h3><p>自定义listview，继承自ListView，添加原有的三个构造方法，重写onMeasure() 方法，在布局文件处使用自定义的Listview，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import android.content.Context;</span><br><span class="line">import android.util.AttributeSet;</span><br><span class="line">import android.widget.ListView;</span><br><span class="line"></span><br><span class="line">public class MyListView extends ListView &#123;</span><br><span class="line"></span><br><span class="line">	public MyListView(Context context) &#123;</span><br><span class="line">		super(context);</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	public MyListView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">		super(context, attrs);</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	public MyListView(Context context, AttributeSet attrs, int defStyle) &#123;</span><br><span class="line">		super(context, attrs, defStyle);</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 重写原方法，使ListView适应ScrollView的效果</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">		int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2,</span><br><span class="line">				MeasureSpec.AT_MOST);</span><br><span class="line">		super.onMeasure(widthMeasureSpec, expandSpec);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注：这种方法使用起来较为方便，它保正了lisview的所有方法，个人就是这样用的。<br>除此之外，还有使用linearLayout替代lisview，个人没有进行测试，感兴趣的的可以尝试下。对上面的各种方法，个人都经过测试，进行事件的监听也不会出先问题，可以放心使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2015年终总结及android学习路线]]></title>
      <url>http://imtianx.cn/2016/04/23/sum-up-2015/</url>
      <content type="html"><![CDATA[<p>转眼间，一年又过去了，距离毕业也越来越近了。回想过去，感觉自己什么都还不会，顿时感到紧迫感。那么，在接下来的日子里，就要充分利用每分每秒，学习充实自己。我们搞it的就得时刻记着：活到老，学到老。<a id="more"></a><br>回想这一年，自己独自学习android，从开始安装配置开发环境，到后来的指导别人并参加实际的项目开发，经历了各种酸甜苦辣。在此，总结下学习的经历。对于android，是个开发上手入门很快的语言，但后期在其他方面需要注意和学习的事情还有很多很多。自己在android学习之路上还有伸长的路要走，但不管怎么样，还是要脚踏实地，一点点的学习，不可骄傲浮躁。下面谈谈android的学习路线(来自网络)：</p>
<h3 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h3><p>基本知识点：比如四大组件如何使用、如何创建Service、如何进行布局、简单的自定义View、动画等常见技术等。<br>参考书籍：《第一行代码 Android》、《疯狂Android》</p>
<h3 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h3><p>稍微深入的知识点：AIDL、Messenger、Binder、多进程、动画、滑动冲突、自定义View、消息队列等。</p>
<ul>
<li>AIDL：熟悉AIDL，理解其工作原理，懂transact和onTransact的区别；</li>
<li>Binder：从Java层大概理解Binder的工作原理，懂Parcel对象的使用；</li>
<li>多进程：熟练掌握多进程的运行机制，懂Messenger、Socket等；</li>
<li>事件分发：弹性滑动、滑动冲突等；</li>
<li>玩转View：View的绘制原理、各种自定义View；</li>
<li>动画系列：熟悉View动画和属性动画的不同点，懂属性动画的工作原理；</li>
<li>懂性能优化、熟悉mat等工具</li>
<li>懂点常见的设计模式<br>学习方法<br>阅读进阶书籍，阅读Android源码，阅读官方文档并尝试自己写相关的技术文章，需要有一定技术深度和自我思考。在这个阶段的学习过程中，有2个点是比较困扰大家的，一个是阅读源码，另一个是自定义View以及滑动冲突。<br>学习view需要注意的地方：</li>
<li>搞懂view的滑动原理</li>
<li>搞懂如何实现弹性滑动</li>
<li>搞懂view的滑动冲突</li>
<li>搞懂view的measure、layout和draw<br>然后再学习几个已有的自定义view的例子，最后就可以搞定自定义view了，所谓万变不离其宗。<br>书籍推荐：《Android开发艺术探索》、《Android群英传》</li>
</ul>
<h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><p>需要懂的知识：</p>
<ul>
<li>了解系统核心机制：</li>
</ul>
<ol>
<li>了解SystemServer的启动过程</li>
<li>了解主线程的消息循环模型</li>
<li>了解AMS和PMS的工作原理</li>
<li>能够回答问题”一个应用存在多少个Window？“</li>
<li>了解四大组件的大概工作流程</li>
<li>…</li>
</ol>
<ul>
<li>基本知识点的细节</li>
</ul>
<ol>
<li>Activity的启动模式以及异常情况下不同Activity的表现</li>
<li>Service的onBind和onReBind的关联</li>
<li>onServiceDisconnected(ComponentName className)和binderDied的区别</li>
<li>AsyncTask在不同版本上的表现细节</li>
<li>线程池的细节和参数配置</li>
<li>…</li>
</ol>
<ul>
<li><p>熟悉设计模式，有架构意识</p>
<p>书籍推荐<br>《Android开发艺术探索》、《Android 源码设计模式解析与实战》、《Android内核剖析》</p>
</li>
</ul>
<p>除此之外，还可以学习一些好的开源框架的使用（如：Eventbuss），还有第三方sdk的接入使用（如:百度地图）；总之，不管怎么说，需要我们不断地学习，接受新知识，愿在新的一年里不断提高。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eventbus 开源库的使用]]></title>
      <url>http://imtianx.cn/2016/04/23/Eventbus-simple-use/</url>
      <content type="html"><![CDATA[<p>EventBus是一款用用于android上的事件分发/订阅的总线，包含发布者、订阅者、事件和总线。主要用于android中intent,handler等在activity，fragment等组件间传递消息。<a id="more"></a>它极好的将消息的发送者和接收者解耦，方便组件间的通信。<br>下载地址：<br>            原地址：<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a><br>            涛哥的地址：<a href="https://github.com/kymjs/EventBus" target="_blank" rel="external">https://github.com/kymjs/EventBus</a> （包含部分中文注释）</p>
<h3 id="1、简单使用"><a href="#1、简单使用" class="headerlink" title="1、简单使用"></a>1、简单使用</h3><p>首先下载改开源库，导入项目中。接下来就是具体的使用了。如下几个方法：</p>
<ul>
<li>EventBus.getDefault().register(this);注册订阅者</li>
<li>EventBus.getDefault().post(“点击按钮，发送消息”);发送消息，传入的是自己的事件类对象</li>
<li>重写 onEventMainThread(Object object) 方法；接收处理消息，这里参数与发送消息的类型一致。</li>
<li>在 onDestroy()中注销当订阅者。</li>
</ul>
<p>这里仅仅为了说明用法，简单的实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.tx.eventbusdemo;</span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import de.greenrobot.event.EventBus;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">	private Button mbtnSend;</span><br><span class="line">	private TextView mtvShowmsg;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">		super.onCreate(savedInstanceState);</span><br><span class="line">		setContentView(R.layout.activity_main);</span><br><span class="line">		//当前类注册为事件订阅者</span><br><span class="line">		EventBus.getDefault().register(this);</span><br><span class="line">		mbtnSend = (Button) findViewById(R.id.btn);</span><br><span class="line">		mtvShowmsg = (TextView) findViewById(R.id.show);</span><br><span class="line"></span><br><span class="line">		mbtnSend.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">			@Override</span><br><span class="line">			public void onClick(View v) &#123;</span><br><span class="line">				//发送消息</span><br><span class="line">			EventBus.getDefault().post(&quot;点击按钮，发送消息&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	//接收处理消息</span><br><span class="line">	public void onEventMainThread(Object object) &#123;  </span><br><span class="line">		mtvShowmsg.setText(object.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	protected void onDestroy() &#123;</span><br><span class="line">		super.onDestroy();</span><br><span class="line">		//注销注册</span><br><span class="line">		EventBus.getDefault().unregister(this);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="http://img.blog.csdn.net/20151230182722984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="2、解析实现过程"><a href="#2、解析实现过程" class="headerlink" title="2、解析实现过程"></a>2、解析实现过程</h3><p>首先在oncreate方法中注册订阅者，它就会扫描当前类，把onEvent开头的方法记录到map中（Key为方法的参数类型，Value中包含我们的方法）；<br>当子线程执行完毕后，调用post方法，根据其参数查找对应的方法，通过反射来执行相关的方法。</p>
<p>EventBus包含4个ThreadMode：PostThread，MainThread，BackgroundThread，Async。<br>对应的方法及功能为：<br><strong>onEventPostThread</strong>   在当前发布事件的线程中执行<br><strong>onEventMainThread</strong>   在ui线程中执行<br><strong>onEventAsync</strong>   加入后台任务队列，使用线程池调用。<br><strong>onEventBackgroundThread</strong>   在非UI线程发布的事件，则直接执行；否则，加入后台任务队列，使用线程池一个接一个调用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 快捷键]]></title>
      <url>http://imtianx.cn/2016/04/23/androidstudio-keaymap/</url>
      <content type="html"><![CDATA[<p>原官方快捷键：<a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf" target="_blank" rel="external">https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf</a><br>Alt+回车 导入包,自动修正<br>Ctrl+N   查找类<br>Ctrl+Shift+N 查找文件<br>Ctrl+Alt+L  格式化代码<br>Ctrl+Alt+O 优化导入的类和包<br>Alt+Insert 生成代码(如get,set方法,构造函数等<a id="more"></a><br>Ctrl+E或者Alt+Shift+C  最近更改的代码<br>Ctrl+R 替换文本<br>Ctrl+F 查找文本<br>Ctrl+Shift+Space 自动补全代码<br>Ctrl+空格 代码提示<br>Ctrl+Alt+Space 类名或接口名提示<br>Ctrl+P 方法参数提示<br>Ctrl+Shift+Alt+N 查找类中的方法或变量<br>Alt+Shift+C 对比最近修改的代码</p>
<p>Shift+F6  重构-重命名<br>Ctrl+Shift+先上键<br>Ctrl+Y 删除行（ctrl+x不是删除行，是剪切。如果不选中，则为剪切当行。ths for 貌似掉线）<br>Ctrl+D 复制行<br>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）<br>Ctrl+J  自动代码<br>Ctrl+E 最近打开的文件<br>Ctrl+H 显示类结构图<br>Ctrl+Q 显示注释文档<br>Alt+F1 查找代码所在位置<br>Alt+1 快速打开或隐藏工程面板<br>Ctrl+Alt+ left/right 返回至上次浏览的位置<br>Alt+ left/right 切换代码视图<br>Alt+ Up/Down 在方法间快速移动定位<br>Ctrl+Shift+Up/Down 代码向上/下移动。<br>F2 或Shift+F2 高亮错误或警告快速定位</p>
<p>代码标签输入完成后，按Tab，生成代码。<br>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。<br>Ctrl+W 选中代码，连续按会有其他效果<br>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。<br>Ctrl+Up/Down 光标跳转到第一行或最后一行下<br>Ctrl+B 快速打开光标处的类或方法<br>最常用快捷键<br>1.Ctrl＋E，可以显示最近编辑的文件列表<br>2.Shift＋Click可以关闭文件<br>3.Ctrl＋[或]可以跳到大括号的开头结尾<br>4.Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方<br>5.Ctrl＋F12，可以显示当前文件的结构<br>6.Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择<br>7.Ctrl＋N，可以快速打开类<br>8.Ctrl＋Shift＋N，可以快速打开文件<br>9.Alt＋Q可以看到当前方法的声明<br>10.Ctrl＋W可以选择单词继而语句继而行继而函数<br>11.Alt＋F1可以将正在编辑的元素在各个面板中定位<br>12.Ctrl＋P，可以显示参数信息<br>13.Ctrl＋Shift＋Insert可以选择剪贴板内容并插入<br>14.Alt＋Insert可以生成构造器/Getter/Setter等<br>15.Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量<br>16.Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch<br>17.Alt＋Up and Alt＋Down可在方法间快速移动<br>下面的不是很有用<br>18.在一些地方按Alt＋Enter可以得到一些Intention Action，例如将”==”改为”equals()”<br>19.Ctrl＋Shift＋Alt＋N可以快速打开符号<br>20.Ctrl＋Shift＋Space在很多时候都能够给出Smart提示<br>21.Alt＋F3可以快速寻找<br>22.Ctrl＋/和Ctrl＋Shift＋/可以注释代码<br>23.Ctrl＋Alt＋B可以跳转到抽象方法的实现<br>24.Ctrl＋O可以选择父类的方法进行重写<br>25.Ctrl＋Q可以看JavaDoc<br>26.Ctrl＋Alt＋Space是类名自动完成<br>27.快速打开类/文件/符号时，可以使用通配符，也可以使用缩写<br>28.Live Templates! Ctrl＋J<br>29.Ctrl＋Shift＋F7可以高亮当前元素在当前文件中的使用<br>30.Ctrl＋Alt＋Up /Ctrl＋Alt＋Down可以快速跳转搜索结果<br>31.Ctrl＋Shift＋J可以整合两行<br>32.Alt＋F8是计算变量值</p>
<p>IntelliJ IDEA使用技巧一览表<br>在使用 InelliJ IDEA 的过程中，通过查找资料以及一些自己的摸索，发现这个众多 Java 程序员喜欢的 IDE 里有许多值得一提的小窍门，如果能熟练的将它们应用于实际开发过程中，相信它会大大节省你的开发时间，而且随之而来的还会有那么一点点成就感：） Try it ！ </p>
<p>1 、写代码时用 Alt-Insert （ Code|Generate… ）可以创建类里面任何字段的 getter 与 setter 方法。<br>&lt;?xml:namespace prefix = v ns = “urn:schemas-microsoft-com:vml” /&gt; </p>
<p>2 、右键点击断点标记（在文本的左边栏里）激活速查菜单，你可以快速设置 enable/disable 断点或者条件它的属性。</p>
<p>3 、 CodeCompletion （代码完成）属性里的一个特殊的变量是，激活 Ctrl-Alt-Space 可以完成在或不在当前文件里的类名。如果类没有引入则 import 标志会自动创建。</p>
<p>4 、使用 Ctrl-Shift-V 快捷键可以将最近使用的剪贴板内容选择插入到文本。使用时系统会弹出一个含有剪贴内容的对话框，从中你可以选择你要粘贴的部分。 </p>
<p>5 、利用 CodeCompletion （代码完成）属性可以快速地在代码中完成各种不同地语句，方法是先键入一个类名地前几个字母然后再用 Ctrl-Space 完成全称。如果有多个选项，它们会列在速查列表里。 </p>
<p>6 、用 Ctrl-/ 与 Ctrl-Shift-/ 来注释 / 反注释代码行与代码块。 </p>
<p>-/ 用单行注释标记（“ //… ”）来注释 / 反注释当前行或者选择地代码块。而 Ctrl-Shift-/ 则可以用块注释标记（“ /<em>…</em>/ ”）把所选块包围起来。要反注释一个代码块就在块中任何一个地方按 Ctrl-Shift-/ 即可。</p>
<p>7 、按 Alt-Q （ View|Context Info ）可以不需要移动代码就能查看当前方法地声明。连续按两次会显示当前所编辑的类名。 </p>
<p>8 、使用 Refactor|Copy Class… 可以创建一个所选择的类的“副本”。这一点很有用，比如，在你想要创建一个大部分内容都和已存在类相同的类时。 </p>
<p>9 、在编辑器里 Ctrl-D 可以复制选择的块或者没有所选块是的当前行。 </p>
<p>10 、 Ctrl-W （选择字）在编辑器里的功能是先选择脱字符处的单词，然后选择源代码的扩展区域。举例来说，先选择一个方法名，然后是调用这个方法的表达式，然后是整个语句，然后包容块，等等。</p>
<p>11 、如果你不想让指示事件细节的“亮球”图标在编辑器上显示，通过按 Alt-Enter 组合键打开所有事件列表然后用鼠标点击它就可以把这个事件文本附件的亮球置成非活动状态。 </p>
<p>这样以后就不会有指示特殊事件的亮球出现了，但是你仍然可以用 Alt-Enter 快捷键使用它。</p>
<p>12 、在使用 CodeCompletion 时，可以用逗点（ . ）字符，逗号（，）分号（；），空格和其它字符输入弹出列表里的当前高亮部分。选择的名字会随着输入的字符自动输入到编辑器里。 </p>
<p>13 、在任何工具窗口里使用 Escape 键都可以把焦点移到编辑器上。 </p>
<p>Shift-Escape 不仅可以把焦点移到编辑器上而且还可以隐藏当前（或最后活动的）工具窗口。 </p>
<p>F12 键把焦点从编辑器移到最近使用的工具窗口。 </p>
<p>14 、在调试程序时查看任何表达式值的一个容易的方法就是在编辑器中选择文本（可以按几次 Ctrl-W 组合键更有效地执行这个操作）然后按 Alt-F8 。 </p>
<p>15 、要打开编辑器脱字符处使用的类或者方法 Java 文档的浏览器，就按 Shift-F1 （右键菜单的 External JavaDoc ）。 </p>
<p>要使用这个功能须要把加入浏览器的路径，在“ General ”选项中设置（ Options | IDE Settings ），另外还要把创建的 Java 文档加入到工程中（ File | Project Properties ）。 </p>
<p>16 、用 Ctrl-F12 （ View | File Structure Popup ）键你可以在当前编辑的文件中快速导航。 </p>
<p>这时它会显示当前类的成员列表。选中一个要导航的元素然后按 Enter 键或 F4 键。要轻松地定位到列表中的一个条目，只需键入它的名字即可。 </p>
<p>17 、在代码中把光标置于标记符或者它的检查点上再按 Alt-F7 （右键菜单中的 Find Usages… ）会很快地查找到在整个工程中使用地某一个类、方法或者变量的位置。</p>
<p>18 、按 Ctrl-N （ Go to | Class… ）再键入类的名字可以快速地在编辑器里打开任何一个类。从显示出来的下拉列表里选择类。<br>同样的方法你可以通过使用 Ctrl-Shift-N （ Go to | File… ）打开工程中的非 Java 文件。</p>
<p>19 、要导航代码中一些地方使用到的类、方法或者变量的声明，把光标放在查看项上再按 Ctrl-B 即可。也可以通过按 Ctrl 键的同时在查看点上单击鼠标键调转到声明处。 </p>
<p>20 、把光标放到查看点上再按 Ctrl-Alt-B 可以导航到一个抽象方法的实现代码。</p>
<p>21 、要看一个所选择的类的继承层次，按 Ctrl-H （ Browse Type Hierarchy ）即可。也可以激活编辑器中的继承关系视图查看当前编辑类的继承关系。22 、使用 Ctrl-Shift-F7 （ Search | Highlight Usages in File ）可以快速高亮显示当前文件中某一变量的使用地方。按 Escape 清除高亮显示。 </p>
<p>23 、用 Alt-F3 （ Search | Incremental Search ）在编辑器中实现快速查查找功能。 </p>
<p>在“ Search for: ”提示工具里输入字符，使用箭头键朝前和朝后搜索。按 Escape 退出。</p>
<p>24 、按 Ctrl-J 组合键来执行一些你记不起来的 Live Template 缩写。比如，键“ it ”然后按 Ctrl-J 看看有什么发生。</p>
<p>25 、 Introduce Variable 整合帮助你简化代码中复杂的声明。举个例子，在下面的代码片断里，在代码中选择一个表达式：然后按 Ctrl-Alt-V 。</p>
<p>26 、 Ctrl-Shift-J 快捷键把两行合成一行并把不必要的空格去掉以匹配你的代码格式。</p>
<p>27 、 Ctrl-Shift-Backspace （ Go to | Last Edit Location ）让你调转到代码中所做改变的最后一个地方。 </p>
<p>多按几次 Ctrl-Shift-Backspace 查看更深的修改历史。 </p>
<p>28 、用 Tools | Reformat Code… 根据你的代码样式参考（查看 Options | IDE Setting | Code Style ）格式化代码。 </p>
<p>使用 Tools | Optimize Imports… 可以根据设置（查看 Options | IDE Setting | Code Style | Imports ）自动“优化” imports （清除无用的 imports 等）。</p>
<p>29 、使用 IDEA 的 Live Templates | Live Templates 让你在眨眼间创建许多典型代码。比如，在一个方法里键入 </p>
<p>再按 Tab 键看有什么事情发生了。<br>用 Tab 键在不同的模板域内移动。查看 Options | Live Templates 获取更多的细节。</p>
<p>30 、要查看一个文件中修改的本地历史，激活右键菜单里的 Local VCS | Show History… 。也许你可以导航不同的文件版本，看看它们的不同之处再回滚到以前的任何一个版本吧。 </p>
<p>使用同样的右键菜单条目还可以看到一个目录里修改的历史。有了这个特性你就不会丢失任何代码了。</p>
<p>31 、如果要了解主菜单里每一个条目的用途，把鼠标指针移到菜单条目上再应用程序框架的底部的状态栏里就会显示它们的一些简短描述，也许会对你有帮助。 </p>
<p>32 、要在编辑器里显示方法间的分隔线，打开 Options | IDE Settings | Editor ，选中“ Show method separators ”检查盒（ checkbox ）。 </p>
<p>33 、用 Alt-Up 和 Alt-Down 键可以在编辑器里不同的方法之间快速移动。 </p>
<p>34 、用 F2/Shift-F2 键在高亮显示的语法错误间跳转。 </p>
<p>用 Ctrl-Alt-Down/Ctrl-Alt-Up 快捷键则可以在编译器错误信息或者查找操作结果间跳转。</p>
<p>35 、通过按 Ctrl-O （ Code | Override Methods… ）可以很容易地重载基本类地方法。 </p>
<p>要完成当前类 implements 的（或者抽象基本类的）接口的方法，就使用 Ctrl-I （ Code | Implement Methods… ）。 </p>
<p>36 、如果光标置于一个方法调用的括号间，按 Ctrl-P 会显示一个可用参数的列表。</p>
<p>37 、要快速查看编辑器脱字符处使用的类或方法的 Java 文档，按 Ctrl-Q （在弹出菜单的 Show Quick JavaDoc 里）即可。 </p>
<p>38 、像 Ctrl-Q （ Show Quick JavaDoc 显示简洁 Java 文档）， Ctrl-P （ Show Parameter Info 显示参数信息）， Ctrl-B （ Go to Declaration 跳转到声明）， Shift-F1 （ External JavaDoc 外部 Java 文档）以及其它一些快捷键不仅可以在编辑器里使用，也可以应用在代码完成右键列表里。 </p>
<p>39 、 Ctrl-E （ View | Recent Files ）弹出最近访问的文件右键列表。选中文件按 Enter 键打开。 </p>
<p>40 、在 IDEA 中可以很容易地对你的类，方法以及变量进行重命名并在所有使用到它们的地方自动更正。 </p>
<p>试一下，把编辑器脱字符置于任何一个变量名字上然后按 Shift-F6 （ Refactor | Rename… ）。在对话框里键入要显示地新名字再按 Enter 。你会浏览到使用这个变量地所有地方然后按“ Do Refactor ”按钮结束重命名操作。 </p>
<p>41 、要在任何视图（ Project View 工程视图， Structure View 结构视图或者其它视图）里快速 </p>
<p>选择当前编辑地部分（类，文件，方法或者字段），按 Alt-F1 （ View | Select in… ）。 </p>
<p>42 、在“ new ”字符后实例化一个已知类型对象时也许你会用到 SmartType 代码完成这个特性。比如，键入 </p>
<p>再按 Ctrl-Shift-Space ：</p>
<p>43 、通过使用 SmartType 代码完成，在 IDEA 中创建接口的整个匿名 implementation 也是非常容易的，比如，对于一些 listener （监听器），可以键入 </p>
<p>Component component; </p>
<p>component.addMouseListener( </p>
<p>  new <caret is="" here="">   </caret></p>
<p>); </p>
<p>然后再按 Ctrl-Shift-Space 看看有什么发生了。 </p>
<p>44 、在你需要设置一个已知类型的表达式的值时用 SmartType 代码完成也很有帮助。比如，键入 </p>
<p>String s = ( <caret is="" here="">   </caret></p>
<p>再按 Ctrl-Shift-Space 看看会有什么出现。 </p>
<p>45 、在所有视图里都提供了速查功能：在树里只需键入字符就可以快速定位到一个条目。 </p>
<p>46 、当你想用代码片断捕捉异常时，在编辑器里选中这个片断，按 Ctrl-Alt-T （ Code | Surround with… ）然后选择“ try/catch ”。它会自动产生代码片断中抛出的所有异常的捕捉块。在 Options | File Templates | Code tab 中你还可以自己定制产生捕捉块的模板。 </p>
<p>用列表中的其它项可以包围别的一些结构。 </p>
<p>47 、在使用代码完成时，用 Tab 键可以输入弹出列表里的高亮显示部分。 </p>
<p>不像用 Enter 键接受输入，这个选中的名字会覆盖掉脱字符右边名字的其它部分。这一点在用一个方法或者变量名替换另一个时特别有用。 </p>
<p>48 、在声明一个变量时代码完成特性会给你显示一个建议名。比如，开始键入“ private FileOutputStream ”然后按 Ctrl-Space </p>
<p>在 Options | IDE Setting | Code Style 中还可以为本地变量，参数，实例及静态字段定制名字。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初识widget桌面小组件]]></title>
      <url>http://imtianx.cn/2016/04/23/first-use-widget/</url>
      <content type="html"><![CDATA[<p>学习android widget的使用，使用高德地图的定位功能中的天气api来获取天气，做了个简单的demo。<a id="more"></a>widget的开发步骤如下：</p>
<ol>
<li>编写widget布局和配置文件；</li>
<li>编写自己的provider继承自AppWidgetProvider；</li>
<li>使用服务来更新widget；</li>
<li>修改配置文件。</li>
</ol>
<p>开发之前先导入高德定位jar包，修改配置文件添加自己的appkey和相关的权限。（详情请参照：<a href="http://lbs.amap.com/api/android-location-sdk/guide/weather/）" target="_blank" rel="external">http://lbs.amap.com/api/android-location-sdk/guide/weather/）</a></p>
<h3 id="一、编写widget布局文件和配置文件"><a href="#一、编写widget布局文件和配置文件" class="headerlink" title="一、编写widget布局文件和配置文件"></a>一、编写widget布局文件和配置文件</h3><p>这里就添加了一个TextView来显示天气信息；<br>widget配置文件： src/xml/widgetconfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;appwidget-provider xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:initialLayout=&quot;@layout/widget&quot;</span><br><span class="line">    android:minHeight=&quot;100dp&quot;</span><br><span class="line">    android:minWidth=&quot;200dp&quot;</span><br><span class="line">    android:updatePeriodMillis=&quot;860000&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;/appwidget-provider&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="二、AppWidgetProvider的编写，启动与停止服务。"><a href="#二、AppWidgetProvider的编写，启动与停止服务。" class="headerlink" title="二、AppWidgetProvider的编写，启动与停止服务。"></a>二、AppWidgetProvider的编写，启动与停止服务。</h3><p>在AppWidgetProvider中的主要方法有：<br>onEnabled(Context context)–第一个widget添加时调用<br>onDeleted(Context context, int[] appWidgetIds)–widget被从屏幕移除时调用<br>onDisabled(Context context) –widget 最后一个被从屏幕移除<br>onUpdate(Context context,<br>AppWidgetManager appWidgetManager,<br>int[] appWidgetIds)—刷新widget</p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.tx.weatherwidget;</span><br><span class="line">import android.appwidget.AppWidgetManager;</span><br><span class="line">import android.appwidget.AppWidgetProvider;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">public class WeatherProvider extends AppWidgetProvider &#123;</span><br><span class="line">	/**</span><br><span class="line">	 * widget第一个添加到桌面执行</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public void onEnabled(Context context) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		super.onEnabled(context);</span><br><span class="line">		Intent intent = new Intent(context, WeatherService.class);</span><br><span class="line">		context.startService(intent);</span><br><span class="line">	&#125;</span><br><span class="line">	/**</span><br><span class="line">	 * 最后一个widget移除桌面执行</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public void onDisabled(Context context) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		super.onDisabled(context);</span><br><span class="line">		Intent intent = new Intent(context, WeatherService.class);</span><br><span class="line">		context.stopService(intent);</span><br><span class="line">	&#125;</span><br><span class="line">	/**</span><br><span class="line">	 * 更新数据</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public void onUpdate(Context context, AppWidgetManager appWidgetManager,</span><br><span class="line">			int[] appWidgetIds) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		super.onUpdate(context, appWidgetManager, appWidgetIds);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="三、service的编写，获取天气，widget更新。"><a href="#三、service的编写，获取天气，widget更新。" class="headerlink" title="三、service的编写，获取天气，widget更新。"></a>三、service的编写，获取天气，widget更新。</h3><p>主要代码在updateView中，这里使用RemoteViews，AppWidgetManager的updateAppWidget来通知widget更新。<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">package com.tx.weatherwidget;</span><br><span class="line">/**</span><br><span class="line"> * 调用高德地图的天气api获取天气</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">import android.app.Service;</span><br><span class="line">import android.appwidget.AppWidgetManager;</span><br><span class="line">import android.content.ComponentName;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.widget.RemoteViews;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">import com.amap.api.location.AMapLocalWeatherForecast;</span><br><span class="line">import com.amap.api.location.AMapLocalWeatherListener;</span><br><span class="line">import com.amap.api.location.AMapLocalWeatherLive;</span><br><span class="line">import com.amap.api.location.LocationManagerProxy;</span><br><span class="line">import com.tx.weatherwidget.R;</span><br><span class="line"></span><br><span class="line">public class WeatherService extends Service implements</span><br><span class="line">AMapLocalWeatherListener&#123;</span><br><span class="line">	private LocationManagerProxy mLocationManagerProxy;</span><br><span class="line">	@Override</span><br><span class="line">	public IBinder onBind(Intent arg0) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void onCreate() &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		super.onCreate();</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">	/**</span><br><span class="line">	 * 注册天气监听</span><br><span class="line">	 */</span><br><span class="line">	private void init() &#123;</span><br><span class="line">		mLocationManagerProxy = LocationManagerProxy.getInstance(this);</span><br><span class="line">		mLocationManagerProxy.requestWeatherUpdates(</span><br><span class="line">				LocationManagerProxy.WEATHER_TYPE_LIVE, this);</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void onWeatherForecaseSearched(AMapLocalWeatherForecast arg0) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void onWeatherLiveSearched(AMapLocalWeatherLive aMapLocalWeatherLive) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		if(aMapLocalWeatherLive!=null &amp;&amp; aMapLocalWeatherLive.getAMapException().getErrorCode() == 0)&#123;</span><br><span class="line">			String city = aMapLocalWeatherLive.getCity();//城市</span><br><span class="line">			String weather = aMapLocalWeatherLive.getWeather();//天气情况</span><br><span class="line">			String windDir = aMapLocalWeatherLive.getWindDir();//风向</span><br><span class="line">			String windPower = aMapLocalWeatherLive.getWindPower();//风力</span><br><span class="line">			String humidity = aMapLocalWeatherLive.getHumidity();//空气湿度</span><br><span class="line">			String reportTime = aMapLocalWeatherLive.getReportTime();//数据发布时间</span><br><span class="line">			updateView(&quot;城市： &quot;+city+&apos;\n&apos;+</span><br><span class="line">					&quot;风向： &quot;+windDir+&apos;\n&apos;+</span><br><span class="line">					&quot;风力： &quot;+windPower+&apos;\n&apos;+</span><br><span class="line">					&quot;天气情况： &quot;+weather+&apos;\n&apos;+</span><br><span class="line">					&quot;空气湿度： &quot;+humidity+&apos;\n&apos;+</span><br><span class="line">					&quot;数据发布时间： &quot;+reportTime+&apos;\n&apos;);</span><br><span class="line"></span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			// 获取天气预报失败</span><br><span class="line">			Toast.makeText(this,&quot;获取天气预报失败:&quot;+ aMapLocalWeatherLive.getAMapException().getErrorMessage(), Toast.LENGTH_SHORT).show();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	private void updateView(String info)&#123;</span><br><span class="line">		RemoteViews remoteViews = new RemoteViews(getPackageName(),</span><br><span class="line">				R.layout.widget);</span><br><span class="line">		remoteViews.setTextViewText(R.id.weather, info);</span><br><span class="line">		AppWidgetManager manager = AppWidgetManager.</span><br><span class="line">				getInstance(getApplicationContext());</span><br><span class="line">		ComponentName provider = new ComponentName(</span><br><span class="line">				getApplicationContext(), WeatherProvider.class);</span><br><span class="line">		manager.updateAppWidget(provider, remoteViews);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="四、修改配置文件，注册服务。"><a href="#四、修改配置文件，注册服务。" class="headerlink" title="四、修改配置文件，注册服务。"></a>四、修改配置文件，注册服务。</h3><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name=&quot;com.tx.weatherwidget.WeatherProvider&quot; &gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.appwidget.action.APPWIDGET_UPDATE&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line"></span><br><span class="line">            &lt;meta-data</span><br><span class="line">                android:name=&quot;android.appwidget.provider&quot;</span><br><span class="line">                android:resource=&quot;@xml/widgetconfig&quot; /&gt;</span><br><span class="line">        &lt;/receiver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;service android:name=&quot;com.tx.weatherwidget.WeatherService&quot; &gt;</span><br><span class="line">        &lt;/service&gt;</span><br></pre></td></tr></table></figure></p>
<p>源代码下载：<a href="http://download.csdn.net/detail/txadf/9267497" target="_blank" rel="external">weatherWidget</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PLSQL安装、连接服务器及字符编码更改]]></title>
      <url>http://imtianx.cn/2016/04/23/plsql-install-config/</url>
      <content type="html"><![CDATA[<p>在学习时用oracle时，使用PLSQL客户端来操作数据库，这里简单介绍了它安装相关问题。<a id="more"></a></p>
<h3 id="一、下载PLSQL并破解"><a href="#一、下载PLSQL并破解" class="headerlink" title="一、下载PLSQL并破解"></a>一、下载PLSQL并破解</h3><p>（看不惯英文的可以安装汉化文件）,下载地址：<a href="http://download.csdn.net/detail/txadf/9259051" target="_blank" rel="external">PLSQL+instantclient</a></p>
<h3 id="二、解压开始安装，"><a href="#二、解压开始安装，" class="headerlink" title="二、解压开始安装，"></a>二、解压开始安装，</h3><p>如下图介绍；并将instantclient放到自己安装的文件位置，便于之后使用。</p>
<p><img src="http://img.blog.csdn.net/20151110212717528?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="三、破解软件"><a href="#三、破解软件" class="headerlink" title="三、破解软件"></a>三、破解软件</h3><p>填写instantclient文件的位置；<br>   （1）、安装完成后运行PLSQL，在弹出的登陆界面直接点击取消，进入；<br>   （2）、帮助—&gt;注册，运行破解文件，将产品编号、序列和口令（密码）对应的填入；<br>   （3）、工具—&gt;首选项，如下图，在‘1’处填      入：D:\software_Study\oracle\instantclient_11_2\network\admin；在‘2’处填入：D:\software_Study\oracle\instantclient_11_2\oci.dll<br>注：如果连接的是服务器端的oracle，需要将‘1’文件夹下的’tnsnames.ora’,用记事本打开，更改第二行的host的值为服务器的ip地址。</p>
<h3 id="四、配置环境变量（可选操作）"><a href="#四、配置环境变量（可选操作）" class="headerlink" title="四、配置环境变量（可选操作）"></a>四、配置环境变量（可选操作）</h3><p>完成上述步骤后，退出登陆，这里使用在服务器端创建的用户名和密码，数据库选择‘XE’，连接为‘Normal’，便可登陆。<br>如果需要更改字符编码，需配置环境变量，<br>查看服务器编码：select userenv(‘language’) from dual;<br>查看PLSQL客户端编码：select * from V$NLS_PARAMETERS; 看NLS_LANGUAGE值与上一语句值是否相等；<br>我们服务器编码是utf-8，这里不匹配，添加如下环境变量：</p>
<p>变量名：NLS_LANG<br>值：AMERICAN_AMERICA.AL32UTF8</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android开发较好的blog]]></title>
      <url>http://imtianx.cn/2016/04/23/excellent-blog-author-of-android/</url>
      <content type="html"><![CDATA[<p>作为初学者，跟着大神的脚步才能成为大神，少走弯路。以下是个人收藏的一些blog。<a id="more"></a><br>CSDN博客：<br>    郭霖:<a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">http://blog.csdn.net/guolin_blog</a><br>    鸿洋：<a href="http://blog.csdn.net/lmj623565791" target="_blank" rel="external">http://blog.csdn.net/lmj623565791</a><br>    IT_xiao小巫：<a href="http://blog.csdn.net/wwj_748" target="_blank" rel="external">http://blog.csdn.net/wwj_748</a><br>    Mr.Simple：<a href="http://blog.csdn.net/bboyfeiyu" target="_blank" rel="external">http://blog.csdn.net/bboyfeiyu</a><br>    爱哥：<a href="http://blog.csdn.net/aigestudio" target="_blank" rel="external">http://blog.csdn.net/aigestudio</a><br>   老罗：<a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="external">http://blog.csdn.net/luoshengyang</a><br>    任玉刚：<a href="http://blog.csdn.net/singwhatiwanna" target="_blank" rel="external">http://blog.csdn.net/singwhatiwanna</a><br>    夏安明：<a href="http://blog.csdn.net/xiaanming" target="_blank" rel="external">http://blog.csdn.net/xiaanming</a><br>    徐医生：<a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external">http://blog.csdn.net/eclipsexys</a><br>    郭神：<a href="http://blog.csdn.net/sinyu890807/" target="_blank" rel="external">http://blog.csdn.net/sinyu890807/</a><br>    张兴业：<a href="http://blog.csdn.net/xyz_lmn/" target="_blank" rel="external">http://blog.csdn.net/xyz_lmn/</a><br>    咪当系欧巴：<a href="http://blog.csdn.net/hellogv" target="_blank" rel="external">http://blog.csdn.net/hellogv</a><br>个人Blog<br>    张涛：<a href="http://www.kymjs.com/" target="_blank" rel="external">http://www.kymjs.com/</a><br>    码农明明桑：<a href="http://blog.isming.me/" target="_blank" rel="external">http://blog.isming.me/</a><br>     张明云：<a href="http://zmywly8866.github.io/pages/archive.html" target="_blank" rel="external">http://zmywly8866.github.io/pages/archive.html</a><br>    郝锡强：<a href="http://www.haoxiqiang.info/static/timing.html" target="_blank" rel="external">http://www.haoxiqiang.info/static/timing.html</a><br>    胡凯：<a href="http://hukai.me/blog/archives/" target="_blank" rel="external">http://hukai.me/blog/archives/</a><br>    农民伯伯：<a href="http://www.cnblogs.com/over140/" target="_blank" rel="external">http://www.cnblogs.com/over140/</a><br>    Trinea：<a href="http://www.trinea.cn/" target="_blank" rel="external">http://www.trinea.cn/</a><br>    daimajia：<a href="http://blog.daimajia.com/" target="_blank" rel="external">http://blog.daimajia.com/</a><br>    stay4it：<a href="http://www.cnblogs.com/stay/" target="_blank" rel="external">http://www.cnblogs.com/stay/</a><br>    stormzhang：<a href="http://stormzhang.com/posts.html" target="_blank" rel="external">http://stormzhang.com/posts.html</a><br>    Coder Robin：<a href="http://coderrobin.com/" target="_blank" rel="external">http://coderrobin.com/</a> </p>
<p>更多资料：<br><a href="http://blog.csdn.net/txadf/article/details/49965053" target="_blank" rel="external">Android学习资源网站大全</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PhotoView与GifView的使用]]></title>
      <url>http://imtianx.cn/2016/04/23/PhotoView_GifView/</url>
      <content type="html"><![CDATA[<p>为了解决图片的缩放和gif格式的图片显示问题，这里采用了开源库PhototView(处理图片缩放问题)和GifView(显示gif格式图片)。<a id="more"></a><br><a href="http://download.csdn.net/detail/txadf/9204419" target="_blank" rel="external">PhototView下载路径</a>，<a href="http://download.csdn.net/detail/txadf/9204413" target="_blank" rel="external">GifView下载路径</a>，<a href="http://download.csdn.net/detail/txadf/9204481" target="_blank" rel="external">Demo下载路径</a></p>
<h3 id="1、PhotoView加载本地图片"><a href="#1、PhotoView加载本地图片" class="headerlink" title="1、PhotoView加载本地图片"></a>1、PhotoView加载本地图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * PhotoView 加载本地图片</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">private ImageView mImageView;</span><br><span class="line">private PhotoViewAttacher mPhotoViewAttacher;</span><br><span class="line"></span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">	super.onCreate(savedInstanceState);</span><br><span class="line">	requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">	setContentView(R.layout.photoview_local);</span><br><span class="line">	mImageView = (ImageView) findViewById(R.id.iv_img);</span><br><span class="line">	mPhotoViewAttacher = new PhotoViewAttacher(mImageView);</span><br><span class="line"></span><br><span class="line">	try &#123;</span><br><span class="line">		InputStream inputStream = getAssets().open(&quot;testPhotoView.jpg&quot;);</span><br><span class="line"></span><br><span class="line">		Bitmap bitmap = BitmapFactory.decodeStream(inputStream);</span><br><span class="line">		mImageView.setImageBitmap(bitmap);&lt;/span&gt;</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、PhotoView加载网络图片："><a href="#2、PhotoView加载网络图片：" class="headerlink" title="2、PhotoView加载网络图片："></a>2、PhotoView加载网络图片：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * PhotoView 加载网络图片</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">private PhotoView mImageView;</span><br><span class="line">private PhotoViewAttacher mPhotoViewAttacher;</span><br><span class="line"></span><br><span class="line">private ImageLoader mImageLoader;</span><br><span class="line"></span><br><span class="line">private  String URL = &quot;http://pic3.nipic.com/20090525/2416945_231841034_2.jpg&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line">	super.onCreate(savedInstanceState);</span><br><span class="line">	requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">	setContentView(R.layout.photoview_network);</span><br><span class="line"></span><br><span class="line">	mImageView = (PhotoView) findViewById(R.id.iv_img);</span><br><span class="line"></span><br><span class="line">	mPhotoViewAttacher = new PhotoViewAttacher(mImageView);</span><br><span class="line">	mImageLoader = ImageLoader.getInstance();</span><br><span class="line">	mImageLoader.displayImage(URL, mImageView);</span><br><span class="line"></span><br><span class="line">	mImageView.setOnPhotoTapListener(new OnPhotoTapListener() &#123;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public void onPhotoTap(View arg0, float arg1, float arg2) &#123;</span><br><span class="line">			// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>布局文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;uk.co.senab.photoview.PhotoView</span><br><span class="line">        android:id=&quot;@+id/iv_img&quot;</span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height=&quot;fill_parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="3、GifView加载本地图片："><a href="#3、GifView加载本地图片：" class="headerlink" title="3、GifView加载本地图片："></a>3、GifView加载本地图片：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private GifView mGifView;</span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line">	super.onCreate(savedInstanceState);</span><br><span class="line">	requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">	setContentView(R.layout.gifview);</span><br><span class="line"></span><br><span class="line">	mGifView = (GifView) findViewById(R.id.gifview);</span><br><span class="line">	//加载本地图片</span><br><span class="line">	mGifView.setGifImage(R.drawable.gifview);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>布局文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:gravity=&quot;center&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.ant.liao.GifView</span><br><span class="line">        android:id=&quot;@+id/gifview&quot;</span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height=&quot;fill_parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android 打开其他应用]]></title>
      <url>http://imtianx.cn/2016/04/23/open-other-app/</url>
      <content type="html"><![CDATA[<p>在开发中，有时需要在自己的应用中打开其他应用，自己写了两个方法来获取手机上安装的所有应用。这里主要以打开支付宝为例。<a id="more"></a><br>（1）、获取手机上的所有应用，将其放在一个list中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;PackageInfo&gt; getAllApps() &#123;     </span><br><span class="line">	List&lt;PackageInfo&gt; apps = new ArrayList&lt;PackageInfo&gt;();     </span><br><span class="line">	PackageManager packageManager = this.getPackageManager();     </span><br><span class="line">	//获取手机内所有应用     </span><br><span class="line">	List&lt;PackageInfo&gt; paklist = packageManager.getInstalledPackages(0);     </span><br><span class="line">	for (int i = 0; i &lt; paklist.size(); i++) &#123;     </span><br><span class="line">		PackageInfo pak = (PackageInfo) paklist.get(i);     </span><br><span class="line">		//判断是否为非系统预装的应用  (大于0为系统预装应用，小于等于0为非系统应用)   </span><br><span class="line">		if ((pak.applicationInfo.flags &amp; pak.applicationInfo.FLAG_SYSTEM) &lt;= 0) &#123;     </span><br><span class="line">			apps.add(pak);     </span><br><span class="line">		&#125;     </span><br><span class="line">	&#125;     </span><br><span class="line">	return apps;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（2）、打开指定的app(这里打开的是支付宝)。下面的方法是在知道支付宝app的包名的情况下进行判断的，通常情况下不知道包名，可以通过appLabel可以获取应用的名称，以此来匹配。在不存在的情况下，使用手机自带浏览器打开指定的网页。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">private static final String PAY_PACKAGE_NAME = &quot;com.eg.android.AlipayGphone&quot;;</span><br><span class="line">private static final String PAY_WEB_URL = &quot;https://auth.alipay.com/login/index.htm&quot;;</span><br><span class="line">	</span><br><span class="line">private void launchApp() &#123;   </span><br><span class="line">	PackageManager packageManager = this.getPackageManager();   </span><br><span class="line">	List&lt;PackageInfo&gt; packages = getAllApps();   </span><br><span class="line">	PackageInfo pa = null;   </span><br><span class="line">	for(int i=0;i&lt;packages.size();i++)&#123;   </span><br><span class="line">		pa = packages.get(i);   </span><br><span class="line">		//获得应用名   </span><br><span class="line">		String appLabel = packageManager.getApplicationLabel(pa.applicationInfo).toString();   </span><br><span class="line">		//获得包名   </span><br><span class="line">		String appPackage = pa.packageName; </span><br><span class="line">		Log.e(&quot;test&quot;, &quot;&quot;+i+&quot;----&quot;+appLabel+&quot;  &quot;+appPackage);   </span><br><span class="line">		</span><br><span class="line">		//安装支付宝，打开支付宝</span><br><span class="line">		if(appPackage.equals(PAY_PACKAGE_NAME))&#123;</span><br><span class="line">			mIntent = packageManager.getLaunchIntentForPackage(PAY_PACKAGE_NAME);</span><br><span class="line">			startActivity(mIntent); </span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	//为安装支付宝，打开支付宝登陆的网页</span><br><span class="line">	mIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(PAY_WEB_URL));</span><br><span class="line">	mIntent.setClassName(&quot;com.android.browser&quot;, &quot;com.android.browser.BrowserActivity&quot;);</span><br><span class="line">	startActivity(mIntent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后，注意添加网络访问的权限。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android自动获取短信验证码]]></title>
      <url>http://imtianx.cn/2016/04/23/auto-filin-smscode/</url>
      <content type="html"><![CDATA[<p>这里主要使用了<strong>ContentObserver</strong>类（观察者模式类）来监听短信的变化，然后通过<strong>正则表达式</strong>，提取出短信，然后在子线程中更新UI，显示验证码。<a id="more"></a><br>所谓的观察者模式，它是软件设计模式的一种，在此种模式中，一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。观察者模式（Observer）完美的将观察者和被观察的对象分离开，在模块之间划定了清晰的界限，提高了应用程序的可维护性和重用性。观察者设计模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。<br>ContentObserver,内容观察者，目的是观察(捕捉)特定Uri引起的数据库的变化，继而做一些相应的处理，它类似于数据库技术中的触发器(Trigger)，当 ContentObserver 所观察的Uri发生变化时，便会触发它。<br>观察特定Uri的步骤如下：</p>
<ol>
<li>、创建我们特定的 ContentObserver 派生类，必须重载父类构造方法，必须重载 onChange() 方法去处理回调后的功能实现。</li>
<li>利用 context.getContentResolover() 获得 ContentResolove 对象，接着调用 registerContentObserver() 方法去注册内容观察者。</li>
<li>由于 ContentObserver 的生命周期不同步于 Activity 和 Service 等，因此，在不需要时，需要手动的调用 unregisterContentObserver() 去取消注册。</li>
</ol>
<p><em>具体使用：</em></p>
<h3 id="1、继承ContentObserver，重写onChange方法"><a href="#1、继承ContentObserver，重写onChange方法" class="headerlink" title="1、继承ContentObserver，重写onChange方法"></a>1、继承ContentObserver，重写onChange方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.tx.testsms;</span><br><span class="line">/**</span><br><span class="line"> * 自动读取短信验证码</span><br><span class="line"> */</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.database.ContentObserver;</span><br><span class="line">import android.database.Cursor;</span><br><span class="line">import android.net.Uri;</span><br><span class="line">import android.os.Handler;</span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">public class SmsObserver extends ContentObserver &#123;</span><br><span class="line"></span><br><span class="line">	private Context mContext;</span><br><span class="line">	private Handler mHandler;</span><br><span class="line">	private String tel_phone = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">	private String code;</span><br><span class="line"></span><br><span class="line">	public void setTel_phone(String tel_phone) &#123;</span><br><span class="line">		this.tel_phone = tel_phone;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public SmsObserver(Context mContext, Handler handler) &#123;</span><br><span class="line">		super(handler);</span><br><span class="line">		this.mContext = mContext;</span><br><span class="line">		this.mHandler = handler;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void onChange(boolean selfChange, Uri uri) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		super.onChange(selfChange, uri);</span><br><span class="line"></span><br><span class="line">		if(uri.toString().equals(&quot;content:://sms//raw&quot;))&#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Uri inboxUri = Uri.parse(&quot;content://sms//inbox&quot;);</span><br><span class="line"></span><br><span class="line">		Cursor cursor = mContext.getContentResolver().</span><br><span class="line">				query(inboxUri, null, null, null, &quot;date desc&quot;);</span><br><span class="line"></span><br><span class="line">		if(cursor!=null)&#123;</span><br><span class="line">			if(cursor.moveToFirst())&#123;</span><br><span class="line">				String address = cursor.getString(cursor.getColumnIndex(&quot;address&quot;));</span><br><span class="line">				Log.i(&quot;test&quot;, &quot;短信验证码为：--------&quot;+address);</span><br><span class="line"></span><br><span class="line">				String body = cursor.getString(cursor.getColumnIndex(&quot;body&quot;));</span><br><span class="line">				Log.i(&quot;test&quot;, &quot;uri---------&quot;+inboxUri);</span><br><span class="line"></span><br><span class="line">				if(address.equals(tel_phone))&#123;</span><br><span class="line"></span><br><span class="line">					Pattern pattern = Pattern.compile(&quot;(\\d&#123;4&#125;)&quot;);</span><br><span class="line">					Matcher matcher = pattern.matcher(body);</span><br><span class="line"></span><br><span class="line">					if(matcher.find())&#123;</span><br><span class="line">						code = matcher.group(0);</span><br><span class="line">						Log.i(&quot;test&quot;, &quot;短信验证码为：--------&quot;+code);</span><br><span class="line">						mHandler.obtainMessage(</span><br><span class="line">								MainActivity.MSG_RECEIVED_CODE,code).sendToTarget();</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			cursor.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、在MainActivity中注册监听，在子线程中更更新显示UI，并复写onDestroy，取消注册"><a href="#2、在MainActivity中注册监听，在子线程中更更新显示UI，并复写onDestroy，取消注册" class="headerlink" title="2、在MainActivity中注册监听，在子线程中更更新显示UI，并复写onDestroy，取消注册"></a>2、在MainActivity中注册监听，在子线程中更更新显示UI，并复写onDestroy，取消注册</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package com.tx.testsms;</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.net.Uri;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.Handler;</span><br><span class="line">import android.os.Message;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.View.OnClickListener;</span><br><span class="line">import android.view.Window;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">	public static final int MSG_RECEIVED_CODE = 1;</span><br><span class="line"></span><br><span class="line">	private SmsObserver mSmsObserver;</span><br><span class="line">	private Handler mHandler;</span><br><span class="line"></span><br><span class="line">	private EditText metPhone;</span><br><span class="line">	private TextView mtvCode;</span><br><span class="line">	private Button mbtnButton;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">		super.onCreate(savedInstanceState);</span><br><span class="line">		requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">		setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">		metPhone = (EditText) findViewById(R.id.phone);</span><br><span class="line">		mbtnButton = (Button) findViewById(R.id.btn);</span><br><span class="line">		mtvCode = (TextView) findViewById(R.id.code);</span><br><span class="line"></span><br><span class="line">		/**</span><br><span class="line">		 * 设置手机号，拦截固定的手机号</span><br><span class="line">		 */</span><br><span class="line"></span><br><span class="line">		mbtnButton.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">			@Override</span><br><span class="line">			public void onClick(View arg0) &#123;</span><br><span class="line">				// TODO Auto-generated method stub</span><br><span class="line">				mSmsObserver.setTel_phone(metPhone.getText().toString());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		/**</span><br><span class="line">		 * 在子线程中更新UI</span><br><span class="line">		 */</span><br><span class="line">		mHandler = new Handler()&#123;</span><br><span class="line">			@Override</span><br><span class="line">			public void handleMessage(Message msg) &#123;</span><br><span class="line">				// TODO Auto-generated method stub</span><br><span class="line">				super.handleMessage(msg);</span><br><span class="line">				if(msg.what == MSG_RECEIVED_CODE)&#123;</span><br><span class="line">					mtvCode.setText(&quot;四位短信验证码为：&quot;+msg.obj.toString());</span><br><span class="line">					Toast.makeText(getApplicationContext(), msg.obj.toString(), Toast.LENGTH_SHORT).show();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		&lt;span style=&quot;color:#ff0000;&quot;&gt;/**</span><br><span class="line">		 * 实例化ContentObserver,注册短信监听</span><br><span class="line">		 */</span><br><span class="line">		mSmsObserver = new SmsObserver(getApplicationContext(), mHandler);</span><br><span class="line">		Uri  uri = Uri.parse(&quot;content://sms&quot;);</span><br><span class="line">		getContentResolver().registerContentObserver(uri, true, mSmsObserver);&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 由于 ContentObserver 的生命周期不同步于 Activity 和 Service ，</span><br><span class="line">	 * 因此需要手动取消注册</span><br><span class="line">	 * </span><br><span class="line">	 */</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	protected void onDestroy() &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		super.onDestroy();</span><br><span class="line">		&lt;span style=&quot;color:#ff0000;&quot;&gt;getContentResolver().unregisterContentObserver(mSmsObserver);&lt;/span&gt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、注意在配置文件中添加读取短信的权限："><a href="#3、注意在配置文件中添加读取短信的权限：" class="headerlink" title="3、注意在配置文件中添加读取短信的权限："></a>3、注意在配置文件中添加读取短信的权限：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_SMS&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意：最小sdk为16.</strong></p>
<h3 id="4、如下运行截图："><a href="#4、如下运行截图：" class="headerlink" title="4、如下运行截图："></a>4、如下运行截图：</h3><p><img src="http://img.blog.csdn.net/20151017130345615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>控制台打印出的Log：<br><img src="http://img.blog.csdn.net/20151017130527628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>例子源代码：<a href="http://download.csdn.net/detail/txadf/9188791" target="_blank" rel="external">http://download.csdn.net/detail/txadf/9188791</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android SQLite学习手册]]></title>
      <url>http://imtianx.cn/2016/04/23/android-sqlite-notebook/</url>
      <content type="html"><![CDATA[<p> 在实际的应用中，SQLite作为目前最为流行的开源嵌入式关系型数据库，在系统的架构设计中正在扮演着越来越为重要的角色。和很多其它嵌入式NoSQL数据库不同的是，SQLite支持很多关系型数据库的基本特征，这在数据移植、程序演示等应用中有着不可替代的优势。<a id="more"></a>从官方文档中我们可以获悉到，SQLite支持的数据量和运行效率都是非常骄人的，因此在海量数据的解决方案中，SQLite可以作为数据预计算的桥头堡，从而显著减少存储在关系型数据库服务器中的数据数量，最终提高系统的查询效率和运行期效率，同时也可以显著的降低数据备份的磁盘开销</p>
<h4 id="SQLite学习手册-开篇"><a href="#SQLite学习手册-开篇" class="headerlink" title="SQLite学习手册(开篇)"></a>SQLite学习手册(开篇)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/09/2317603.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/09/2317603.html</a><br>一、简介<br>二、SQLite的主要优点<br>三、和RDBMS相比SQLite的一些劣势<br>四、个性化特征</p>
<h4 id="SQLite学习手册-C-C-接口简介"><a href="#SQLite学习手册-C-C-接口简介" class="headerlink" title="SQLite学习手册(C/C++接口简介)"></a>SQLite学习手册(C/C++接口简介)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/13/2321386.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/13/2321386.html</a><br>一、概述<br>二、核心对象和接口<br>三、参数绑定</p>
<h4 id="SQLite学习手册-数据表和视图"><a href="#SQLite学习手册-数据表和视图" class="headerlink" title="SQLite学习手册(数据表和视图)"></a>SQLite学习手册(数据表和视图)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/13/2321668.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/13/2321668.html</a><br>一、创建数据表<br>二、表的修改<br>三、表的删除<br>四、创建视图<br>五、删除视图</p>
<h4 id="SQLite学习手册-内置函数"><a href="#SQLite学习手册-内置函数" class="headerlink" title="SQLite学习手册(内置函数)"></a>SQLite学习手册(内置函数)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/13/2322027.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/13/2322027.html</a><br>一、聚合函数<br>二、核心函数<br>三、日期和时间函数</p>
<h4 id="SQLite学习手册-索引和数据分析-清理"><a href="#SQLite学习手册-索引和数据分析-清理" class="headerlink" title="SQLite学习手册(索引和数据分析/清理)"></a>SQLite学习手册(索引和数据分析/清理)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/14/2322335.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/14/2322335.html</a><br>一、创建索引<br>二、删除索引<br>三、重建索引<br>四、数据分析<br>五、数据清理</p>
<h4 id="SQLite学习手册-数据库和事物"><a href="#SQLite学习手册-数据库和事物" class="headerlink" title="SQLite学习手册(数据库和事物)"></a>SQLite学习手册(数据库和事物)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/14/2322575.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/14/2322575.html</a><br>一、Attach数据库<br>二、Detach数据库<br>三、事物</p>
<h4 id="SQLite学习手册-表达式"><a href="#SQLite学习手册-表达式" class="headerlink" title="SQLite学习手册(表达式)"></a>SQLite学习手册(表达式)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/16/2323907.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/16/2323907.html</a><br>一、常用表达式<br>二、条件表达式<br>三、转换表达式</p>
<h4 id="SQLite学习手册-数据类型"><a href="#SQLite学习手册-数据类型" class="headerlink" title="SQLite学习手册(数据类型)"></a>SQLite学习手册(数据类型)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/18/2325258.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/18/2325258.html</a><br>一、存储种类和数据类型<br>二、类型亲缘性<br>三、比较表达式<br>四、操作符</p>
<h4 id="SQLite学习手册-命令行工具"><a href="#SQLite学习手册-命令行工具" class="headerlink" title="SQLite学习手册(命令行工具)"></a>SQLite学习手册(命令行工具)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/18/2325981.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/18/2325981.html</a></p>
<h4 id="SQLite学习手册-在线备份"><a href="#SQLite学习手册-在线备份" class="headerlink" title="SQLite学习手册(在线备份)"></a>SQLite学习手册(在线备份)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/19/2326309.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/19/2326309.html</a><br>一、常用备份<br>二、在线备份APIs简介<br>三、高级应用技巧</p>
<h4 id="SQLite学习手册-内存数据库"><a href="#SQLite学习手册-内存数据库" class="headerlink" title="SQLite学习手册(内存数据库)"></a>SQLite学习手册(内存数据库)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/20/2328348.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/20/2328348.html</a><br>一、内存数据库<br>二、临时数据库</p>
<h4 id="SQLite学习手册-临时文件"><a href="#SQLite学习手册-临时文件" class="headerlink" title="SQLite学习手册(临时文件)"></a>SQLite学习手册(临时文件)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/21/2328483.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/21/2328483.html</a><br>一、简介<br>二、具体说明<br>三、相关的编译时参数和指令<br>四、其它优化策略</p>
<h4 id="SQLite学习手册-锁和并发控制"><a href="#SQLite学习手册-锁和并发控制" class="headerlink" title="SQLite学习手册(锁和并发控制)"></a>SQLite学习手册(锁和并发控制)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/01/22/2328753.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/01/22/2328753.html</a><br>一、概述<br>二、文件锁<br>三、回滚日志<br>四、数据写入<br>五、SQL级别的事物控制</p>
<h4 id="SQLite学习手册-实例代码-lt-一-gt"><a href="#SQLite学习手册-实例代码-lt-一-gt" class="headerlink" title="SQLite学习手册(实例代码&lt;一&gt;)"></a>SQLite学习手册(实例代码&lt;一&gt;)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/02/07/2340780.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/02/07/2340780.html</a><br>一、获取表的Schema信息<br>二、常规数据插入</p>
<h4 id="SQLite学习手册-实例代码-lt-二-gt"><a href="#SQLite学习手册-实例代码-lt-二-gt" class="headerlink" title="SQLite学习手册(实例代码&lt;二&gt;)"></a>SQLite学习手册(实例代码&lt;二&gt;)</h4><p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/02/07/2341480.html" target="_blank" rel="external">http://www.cnblogs.com/stephen-liu74/archive/2012/02/07/2341480.html</a><br>三、高效的批量数据插入<br>四、数据查询</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQLit相关类的介绍及使用]]></title>
      <url>http://imtianx.cn/2016/04/23/android-sqlite-use/</url>
      <content type="html"><![CDATA[<p>本文主要介绍了SQLit中相关的几个类（SQLiteDatabase、ContentValues、SQLiteOpenHelper）中的常用的方法及其作用。<br><a id="more"></a></p>
<h2 id="1-SQLiteDatabase类"><a href="#1-SQLiteDatabase类" class="headerlink" title="1. SQLiteDatabase类"></a><strong>1. SQLiteDatabase类</strong></h2><p>（对 SQLite数据库增、删、改、查的操作）<br> 常用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execSQL(String  sql);</span><br><span class="line">execSQL(String sql, String[] args);</span><br></pre></td></tr></table></figure></p>
<p>示例：删除 person表中personId＝1的记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db=this.getWritableDatabase();</span><br><span class="line">db.execSQL(“delete from  person where personId=?”,new</span><br><span class="line">String[]&#123;“1”&#125;);</span><br><span class="line">db.execSQL(“delete from  person where personId=1”);</span><br></pre></td></tr></table></figure></p>
<p>提示：this是 SQLiteOpenHelper类的实例，该类稍后介绍。</p>
<h4 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Context.openOrCreateDatabase(Stringdbname,int mode);</span><br></pre></td></tr></table></figure>
<p>作用：打开数据库，若数据库未创建则创建数据库。<br>参数－dbname：数据库文件名。<br>参数－mode：访问权限，有以下常量选择：<br>1、MODE_PRIVATE：不允许其它应用程序访问本数据库。<br>2、MODE_WORLD_READABLE：允许其它应用程序读本数据库。<br>3、MODE_WORLD_WRITEABLE：允许其它应用程序写本数据库。<br>4、MODE_APPEND：若数据库已存在，则允向数据库中许添加数据。</p>
<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long insert(TABLE_NAME, String nullColumnHack, ContentValues   contentValues);</span><br></pre></td></tr></table></figure>
<p>作用：添加记录。<br>参数－TABLE_NAME：表名。<br>参数－nullColumnHack：若插入的数据是空行，则本参数必须设置为 null。<br>参数－contentValues：Map类型的数据，每组键－值对代表一列及其该列的数据</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int delete(TABLE_NAME, String  where, String[]  whereValue);</span><br></pre></td></tr></table></figure>
<p>作用：删除记录。<br>参数－TABLE_NAME：表名。<br>参数－where：删除的条件，相当于 SQL语句中的where部分的 SQL命令。<br>参数－whereValue：符合参数 where的数据。该值是 String[]类型的数组。<br>示例：删除当前数据库中表peson中，字段 personId值为1的行，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete(“person”,”personId=?”,newString[]&#123;“1”&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int update(TABLE_NAME, contentValues,String  where, String[] whereValue) ;</span><br></pre></td></tr></table></figure>
<p>作用：更新记录。<br>参数－TABLE_NAME：表名。<br>参数－contentValues：Map类型的数据，每组键－值对代表一列及其该列的数据。可<br>存放多个键－值对数据，代表需要更新的数据。<br>参数－where：更新的条件，相当于 SQL语句中的where部分的 SQL命令。<br>参数－whereValue：符合参数 where的数据。该值是 String[]类型的数组。<br>示例：更新当前数据库的person表中,personId＝1的记录，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ContentValues  values=new ContentValues();//创建可存操作的键－值对的对象</span><br><span class="line">values.put(“name”,”李四”);//存放姓名数据</span><br><span class="line">values.put(“phone”,”13315577889”);//存放电话数据</span><br><span class="line">//实例化SQLiteDatabase对象</span><br><span class="line">SQLiteDatabase db=this.getWritableDatabase();</span><br><span class="line">db.update(“person” ,values,”personId=?”，new String[]&#123;“1”);//更新数据</span><br></pre></td></tr></table></figure></p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cursor rawQuery(String sql,String[]selectionArgs);</span><br></pre></td></tr></table></figure>
<p>作用：执行带占位符的 SQL查询，返回的结果集存放在 Cursor对象中。<br>参数－sql：查询的 SQL命令。<br>参数－selectionArgs：查询的条件数据。<br>提示：<br>(1)Cursor类稍后介绍。<br>(2)若 sql中没有占位符，则第二个参数设置为 null。<br>(3)对数据表进行变更操作时，使用execSQL，对数据表进行查询时，使用rawQuery<br>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cursorquery(table,projection,selection,selectionArgs,groupby,having,orderby);</span><br></pre></td></tr></table></figure></p>
<p>作用：执行带占位符的 SQL查询，返回的结果集存放在 Cursor对象中。<br>cursor :返回值类型，返回查询结果游标对象。<br>  table : String ,要查询的表名。<br>  projection : String[]，要查询的列名，如果为 null，则查询所有列。<br>  selection : String,查询条件。<br>  selectionArgs:String[]为selection中的？补值的数组。<br>  groupby : String,分组列的列名。<br>  having:String,分组在查询的条件。<br>  orderby:String排序列的列名。</p>
<h2 id="2、ContentValues类"><a href="#2、ContentValues类" class="headerlink" title="2、ContentValues类"></a>2、ContentValues类</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>ContentValues类包装了HashMap类，该类用于存取键－值对的数据，每个键－值对数<br>据表示一列的列名和该列的数据。</p>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ContentValues();</span><br></pre></td></tr></table></figure>
<p>作用：无参构造方法，创建一个内部成员变量为 HashMap<string,object>的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void put(String key,Object value);</span><br></pre></td></tr></table></figure></string,object></p>
<p>作用：向成员变量 mValues中存放一个键－值对数据。<br>提示：value可以是 Java的所有基本数据类型、数组、对象的类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object** get(String key);</span><br></pre></td></tr></table></figure></p>
<p>作用：获取键名 key对应的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXX getAsXXX(String key);</span><br></pre></td></tr></table></figure></p>
<p>作用：返回 XXX类型的值。<br>提示：XXX可以是所有基本类型的包装类，如 Integer，还有AsByteArray（字节数组类型）。</p>
<h2 id="3-、SQLiteOpenHelper类"><a href="#3-、SQLiteOpenHelper类" class="headerlink" title="3 、SQLiteOpenHelper类"></a>3 、SQLiteOpenHelper类</h2><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>SQLiteOpenHelper类是Android提供的用于操作 SQLite数据库的工具类，该工具类能<br>方便地创建数据库、表，以及管理数据库版本。</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">synchronized SQLiteDatabasegetReadableDatabase();</span><br></pre></td></tr></table></figure>
<p>作用：以读写的方式打开数据库对应的 SQLiteDatabase类的对象。<br>提示：synchronized关键字定义该方法为线程同步。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">synchronized SQLiteDatabasegetWriteableDatabase();</span><br></pre></td></tr></table></figure></p>
<p>作用：以写的方式创建或打开数据库对应的 SQLiteDatabase类的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abstract onCreate(SQLiteDatabase db);</span><br></pre></td></tr></table></figure></p>
<p>作用：首次创建数据库时，回调本方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 开源项目分类汇总]]></title>
      <url>http://imtianx.cn/2016/04/23/open-source/</url>
      <content type="html"><![CDATA[<p>在github上看见的开源android 代码，十分全面，内容如下：</p>
<p>目前包括：<br>Android 开源项目第一篇——个性化控件(View)篇<br>  包括ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView<a id="more"></a>、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style、其他<br>Android 开源项目第二篇——工具库篇<br>  包括依赖注入、图片缓存、网络请求、数据库 ORM 工具包、Android 公共库、高版本向低版本兼容库、多媒体、事件总线、传感器、安全、插件化、文件、其他<br>Android 开源项目第三篇——优秀项目篇<br>  比较有意思的完整的 Android 项目<br>Android 开源项目第四篇——开发及测试工具篇<br>  包括开发效率工具、开发自测相关、测试工具、开发及编译环境、其他<br>Android 开源项目第五篇——优秀个人和团体篇<br>  乐于分享并且有一些很不错的开源项目的个人和组织，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛<br>github地址：<a href="https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8E%A7%E4%BB%B6view" target="_blank" rel="external">https://github.com/Trinea/android-open-project#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8E%A7%E4%BB%B6view</a><br>希望对大家有帮助。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[收集的Android开源框架及其地址]]></title>
      <url>http://imtianx.cn/2016/04/23/open-source-frame/</url>
      <content type="html"><![CDATA[<h3 id="1、volley"><a href="#1、volley" class="headerlink" title="1、volley"></a>1、volley</h3><p>项目地址 <a href="https://github.com/smanikandan14/Volley-demo" target="_blank" rel="external">https://github.com/smanikandan14/Volley-demo</a><br>JSON，图像等的异步下载；<br>网络请求的排序（scheduling）<br>网络请求的优先级处理<br>缓存<br>多级别取消请求和Activity和生命周期的联动（Activity结束时同时取消所有网络请求）<br><a id="more"></a></p>
<h3 id="2、android-async-http"><a href="#2、android-async-http" class="headerlink" title="2、android-async-http"></a>2、android-async-http</h3><p>项目地址：<a href="https://github.com/loopj/android-async-http，文档介绍：http://loopj.com/android-async-http/" target="_blank" rel="external">https://github.com/loopj/android-async-http，文档介绍：http://loopj.com/android-async-http/</a> </p>
<p>在匿名回调中处理请求结果<br>在UI线程外进行http请求<br>文件断点上传<br>智能重试<br>默认gzip压缩<br>支持解析成Json格式<br>可将Cookies持久化到SharedPreferences</p>
<h3 id="3、Afinal框架"><a href="#3、Afinal框架" class="headerlink" title="3、Afinal框架"></a>3、Afinal框架</h3><p>项目地址：<a href="https://github.com/yangfuhai/afinal" target="_blank" rel="external">https://github.com/yangfuhai/afinal</a></p>
<p>主要有四大模块：</p>
<p>数据库模块：Android中的orm框架，使用了线程池对sqlite进行操作。<br>注解模块：Android中的ioc框架，完全注解方式就可以进行UI绑定和事件绑定。无需findViewById和setClickListener等。<br>网络模块：通过httpclient进行封装http数据请求，支持Ajax方式加载，支持下载、上传文件功能。<br>图片缓存模块：通过FinalBitmap，imageview加载bitmap的时候无需考虑bitmap加载过程中出现的oom和Android容器快速滑动时候出现的图片错位等现象。<br>　　FinalBitmap可以配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等。FinalBitmap的内存管理使用lru算法，没有使用弱引用（Android2.3以后Google已经不建议使用弱引用，Android2.3后强行回收软引用和弱引用，详情查看Android官方文档），更好的管理bitmap内存。FinalBitmap可以自定义下载器，用来扩展其他协议显示网络图片，比如ftp等。同时可以自定义bitmap显示器，</p>
<p>　　在imageview显示图片的时候播放动画等（默认是渐变动画显示）。</p>
<h3 id="4、xUtils框架"><a href="#4、xUtils框架" class="headerlink" title="4、xUtils框架"></a>4、xUtils框架</h3><p>项目地址：<a href="https://github.com/wyouflf/xUtils，主要有四大模块：" target="_blank" rel="external">https://github.com/wyouflf/xUtils，主要有四大模块：</a><br><strong>数据库模块：</strong><br>Android 中的 orm 框架，一行代码就可以进行增删改查；<br>支持事务，默认关闭；<br>可通过注解自定义表名，列名，外键，唯一性约束，NOT NULL约束，CHECK约束等（需要混淆的时候请注解表名和列名）；<br>支持绑定外键，保存实体时外键关联实体自动保存或更新；<br>自动加载外键关联实体，支持延时加载；<br>支持链式表达查询，更直观的查询语义，参考下面的介绍或sample中的例子。<br><strong>注解模块：</strong></p>
<p>Android中的 ioc 框架，完全注解方式就可以进行 UI，资源和事件绑定；<br>新的事件绑定方式，使用混淆工具混淆后仍可正常工作；<br>目前支持常用的20种事件绑定，参见 View Common Event Listener 类和包com.lidroid.xutils.view.annotation.event。<br><strong>网络模块：</strong></p>
<p>支持同步，异步方式的请求；<br>支持大文件上传，上传大文件不会oom；<br>支持GET，POST，PUT，MOVE，COPY，DELETE，HEAD，OPTIONS，TRACE，CONNECT请求；<br>下载支持301/302重定向，支持设置是否根据Content-Disposition重命名下载的文件；<br>返回文本内容的请求（默认只启用了GET请求）支持缓存，可设置默认过期时间和针对当前请求的过期时间。<br><strong>图片缓存模块：</strong></p>
<p>加载bitmap的时候无需考虑bitmap加载过程中出现的oom和Android容器快速滑动时候出现的图片错位等现象；<br>支持加载网络图片和本地图片；<br>内存管理使用lru算法，更好的管理bitmap内存；<br>可配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等。</p>
<h3 id="5、ThinkAndroid"><a href="#5、ThinkAndroid" class="headerlink" title="5、ThinkAndroid"></a>5、ThinkAndroid</h3><p>项目地址：<a href="https://github.com/white-cat/ThinkAndroid" target="_blank" rel="external">https://github.com/white-cat/ThinkAndroid</a></p>
<p>主要有以下模块：</p>
<p><strong>MVC模块：</strong>实现视图与模型的分离。<br><strong>ioc模块：</strong> Android中的ioc模块，完全注解方式就可以进行UI绑定、res中的资源的读取、以及对象的初始化。<br><strong>数据库模块：</strong> Android中的orm框架，使用了线程池对sqlite进行操作。<br><strong>http模块：</strong> 通过httpclient进行封装http数据请求，支持异步及同步方式加载。<br><strong>缓存模块：</strong> 通过简单的配置及设计可以很好的实现缓存，对缓存可以随意的配置<br><strong>图片缓存模块：</strong> i mageview加载图片的时候无需考虑图片加载过程中出现的oom和Android容器快速滑动时候出现的图片错位等现象。<br><strong>配置器模块：</strong> 可以对简易的实现配对配置的操作，目前配置文件可以支持Preference、Properties对配置进行存取。<br><strong>日志打印模块</strong>：可以较快的轻易的是实现日志打印，支持日志打印的扩展，目前支持对sdcard写入本地打印、以及控制台打印<br><strong>下载器模块</strong>：可以简单的实现多线程下载、后台下载、断点续传、对下载进行控制、如开始、暂停、删除等等。<br><strong>网络状态检测模块</strong>：当网络状态改变时，对其进行检。</p>
<h3 id="6、LoonAndroid"><a href="#6、LoonAndroid" class="headerlink" title="6、LoonAndroid"></a>6、LoonAndroid</h3><p>项目地址：<a href="https://github.com/gdpancheng/LoonAndroid" target="_blank" rel="external">https://github.com/gdpancheng/LoonAndroid</a></p>
<p>主要有以下模块：<br>自动注入框架（只需要继承框架内的APP既可）<br>图片加载框架（多重缓存，自动回收，最大限度保证内存的安全性）<br>网络请求模块（继承了基本上现在所有的http请求）<br>eventbus（集成一个开源的框架）<br>验证框架（集成开源框架）<br>Json解析（支持解析成集合或者对象）<br>数据库（不知道是哪位写的 忘记了）<br>多线程断点下载（自动判断是否支持多线程，判断是否是重定向）<br>自动更新模块<br>一系列工具类</p>
<h3 id="7、图片加载："><a href="#7、图片加载：" class="headerlink" title="7、图片加载："></a>7、图片加载：</h3><p> Universal Image Loader - <a href="https://github.com/onlyTan/Android-Universal-Image-Loader" target="_blank" rel="external">https://github.com/onlyTan/Android-Universal-Image-Loader</a></p>
<p>用法参考 -<a href="http://blog.csdn.net/xiaanming/article/details/26810303" target="_blank" rel="external">http://blog.csdn.net/xiaanming/article/details/26810303</a></p>
<h3 id="8、动画框架："><a href="#8、动画框架：" class="headerlink" title="8、动画框架："></a>8、动画框架：</h3><p>  nineoldandroids -  <a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">https://github.com/JakeWharton/NineOldAndroids</a><br>用法参考 -<a href="http://blog.csdn.net/lmj623565791/article/details/38067475" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/38067475</a></p>
<h3 id="9、进程间通信框架："><a href="#9、进程间通信框架：" class="headerlink" title="9、进程间通信框架："></a>9、进程间通信框架：</h3><p>   eventBus -  <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a><br>用法参考 - <a href="http://blog.csdn.net/lmj623565791/article/details/40794879" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/40794879</a></p>
<h3 id="10、SQLite数据库："><a href="#10、SQLite数据库：" class="headerlink" title="10、SQLite数据库："></a>10、SQLite数据库：</h3><p>LitePal - </p>
<p><a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="external">https://github.com/LitePalFramework/LitePal</a></p>
<h3 id="11、百分比布局："><a href="#11、百分比布局：" class="headerlink" title="11、百分比布局："></a>11、百分比布局：</h3><p>android-percent-support-extend  -  </p>
<p><a href="https://github.com/hongyangAndroid/android-percent-support-extend" target="_blank" rel="external">https://github.com/hongyangAndroid/android-percent-support-extend</a></p>
<p>百分比布局：<br>android-percent-support-extend  -  </p>
<p><a href="https://github.com/hongyangAndroid/android-percent-support-extend" target="_blank" rel="external">https://github.com/hongyangAndroid/android-percent-support-extend</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 屏幕适配dp,sp]]></title>
      <url>http://imtianx.cn/2016/04/23/screen-adaptation-dp_sp/</url>
      <content type="html"><![CDATA[<p>相关的概念：</p>
<h4 id="dp"><a href="#dp" class="headerlink" title="dp"></a><strong>dp</strong></h4><p>即dip，设备独立像素，device independent pixels的缩写，密度无关像素，Android特有的单位，在屏幕密度dpi= 160屏幕上，1dp = 1px。1dp 在屏幕上总是1/160 英寸。<br>它常用在设置镖局，内边距或任何不打算按照像素值指定尺寸的情况下。<br><a id="more"></a></p>
<h4 id="sp"><a href="#sp" class="headerlink" title="sp"></a><strong>sp</strong></h4><p>和dp很类似，英文为：scale-independent pixel ，缩放无关像素，与密度无关。一般用来设置字体大小，和dp的区别是它可以根据用户的字体大小偏好来缩放。</p>
<h4 id="px"><a href="#px" class="headerlink" title="px"></a><strong>px</strong></h4><p>是英文单词pixel的缩写，意为像素，屏幕上的点。我们通常所说的分辨率如480X800就是指的像素。<br> 在设计领域中，像素是用来计算数码影像的最小单位。计算机中显示的图像并非连续的线条组成，而是由许多肉眼看不见的小点组成。如果把影像放大数倍，会发现这些连续色调其实是由许多色彩相近的小点所组成，这些小点就是构成影像的最小单位“像素”。由于是最小的独立显示单位，px均为整数，不会出现0.5px的情况。</p>
<h4 id="dpi"><a href="#dpi" class="headerlink" title="dpi"></a><strong>dpi</strong></h4><p>dpi是Dots Per Inch的缩写, 每英寸点数，即每英寸包含像素个数。比如320X480分辨率的手机，宽2英寸，高3英寸, 每英寸包含的像素点的数量为320/2=160dpi（横向）或480/3=160dpi（纵向），160就是这部手机的dpi，横向和纵向的这个值都是相同的，原因是大部分手机屏幕使用正方形的像素点。</p>
<h4 id="Android-Drawable"><a href="#Android-Drawable" class="headerlink" title="Android Drawable"></a><strong>Android Drawable</strong></h4><p>我们新建一个Android项目后应该可以看到很多drawable文件夹，分别对应不同的dpi</p>
<pre><code>drawable-ldpi (dpi=120, density=0.75)

drawable-mdpi (dpi=160, density=1)

drawable-hdpi (dpi=240, density=1.5)

drawable-xhdpi (dpi=320, density=2)

drawable-xxhdpi (dpi=480, density=3)
</code></pre><p>首先必须清楚一个自动渲染的概念，Android SDK会自动屏幕尺寸选择对应的资源文件进行渲染，如SDK检测到你手机dpi是160的话会优先到drawable-mdpi文件夹下找对应的图片资源，注意只是优先，假设你手机dpi是160，但是你只在xhpdi文件夹下有对应的图片资源文件，程序一样可以正常运行。所以理论上来说只需要提供一种规格的图片资源就ok了，如果只提供ldpi规格的图片，对于大分辨率的手机如果把图片放大就会不清晰，所以需要提供一套你需要支持的最大dpi的图片，这样即使用户的手机分辨率很小，这样图片缩小依然很清晰。</p>
<p><strong>xhdpi成为首选</strong><br>上面说了只需要提供一套大的dpi的图片就ok了，现在市面手机分辨率最大可达到1080X1920的分辨率，如Nexus5，dpi属于xxhdpi，但是毕竟还没普及，目前市面上最普遍的高端机的分辨率还多集中在720X1080范围，也就是多集中在xhdpi，所以目前来看xhpdi规则的图片成为了首选。当然随着技术规格的提高以后发展，以后可能市场上xxdpi的手机会越来越普遍，但这是后话。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android 中webview的屏幕适配问题]]></title>
      <url>http://imtianx.cn/2016/04/23/webview-Screen-adaptation/</url>
      <content type="html"><![CDATA[<p>两行代码解决WebView的屏幕适配问题<br><a id="more"></a><br>一个简单的方法，让网页快速适应手机屏幕，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebSettings webSettings= webView.getSettings();</span><br><span class="line">webSettings.setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN);</span><br></pre></td></tr></table></figure></p>
<p>说明：<br><em>LayoutAlgorithm</em>  是一个枚举，用来控制html的布局，总共有三种类型：<br> <strong>NORMAL</strong>：正常显示，没有渲染变化。<br> <strong>SINGLE_COLUMN</strong>：把所有内容放到WebView组件等宽的一列中。<br> <strong>NARROW_COLUMNS</strong>：可能的话，使所有列的宽度不超过屏幕宽度。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo 编写发布博客]]></title>
      <url>http://imtianx.cn/2016/04/23/hexo-%20write-blog/</url>
      <content type="html"><![CDATA[<p>上一篇 :<a href="http://imtianx.cn/2016/04/20/Hexo+github%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">Hexo+github搭建个人博客</a><br>我们介绍了博客的搭建过程，这里说明如何编写博客及发布.<br><a id="more"></a></p>
<h2 id="1、编写博客"><a href="#1、编写博客" class="headerlink" title="1、编写博客"></a>1、编写博客</h2><ul>
<li><h5 id="a、使用hexo-命令"><a href="#a、使用hexo-命令" class="headerlink" title="a、使用hexo 命令"></a>a、使用hexo 命令</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] blogName</span><br></pre></td></tr></table></figure>
<p>  这里layout默认的是 <strong>post</strong>,可以为文章指定标题，日期，分类，标签等，方便博客的管理。其中分类和标签若有多个，可放在“<strong>[ ]</strong>”中，用“<strong>，</strong>”。隔开具体如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">	title: &#123;&#123; title &#125;&#125;</span><br><span class="line">	date: &#123;&#123; date &#125;&#125;</span><br><span class="line">	categories: [分类1,子分类]</span><br><span class="line">	tags: [标签1,标签2,]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>需要注意的是是：“<strong>title：</strong>”标签<strong>冒号</strong>后有<strong>空格</strong>，其他的同样。<br>此外，为了界面美观，可以添加 显示”<strong>read more</strong>“,如：只显示第一段，则在第一段后添加：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="b、直接用编辑器编写"><a href="#b、直接用编辑器编写" class="headerlink" title="b、直接用编辑器编写"></a>b、直接用编辑器编写</h5><p>  博客的编写支持markdown 语法，个人使用的是<strong>作业部落</strong>的Cmd Markdown 编辑器，非常好用，语法简单，方便，具体用法参见<a href="https://www.zybuluo.com/mdeditor#345522" target="_blank" rel="external">这里</a>。<br>  这种方式需要在写好的文件开头添加<strong>post</strong>文件，方法同上。然后吧写好的文件放到“<strong>_posts</strong>” 文件夹下，如果没有准备发布，作为草稿可以放在“<strong>_data</strong>”文件夹下。</p>
</li>
</ul>
<h2 id="2、发布博客"><a href="#2、发布博客" class="headerlink" title="2、发布博客"></a>2、发布博客</h2><p>打开gitshell 进入博客根目录，生成静态页面：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></p>
<p>然后起动服务就可以在网页上预览了。</p>
<p>最后就是将页面提交github。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+github 搭建个人博客]]></title>
      <url>http://imtianx.cn/2016/04/20/hexo+github%20-build-my-blog/</url>
      <content type="html"><![CDATA[<p>最近，看见很多人在使用hexo+github搭建自己的博客，为了方便记录平时的学习内容。在此，我也学习搭建一个个人博客，记下自己的搭建过程，方便自己，也方便他人。<br><a id="more"></a></p>
<h2 id="1、安装前准备"><a href="#1、安装前准备" class="headerlink" title="1、安装前准备"></a>1、安装前准备</h2><blockquote>
<ul>
<li>安装 <strong>Node.js</strong> ，(可以去 <a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a> 下载相应的版本，并安装。</li>
<li>安装Git (或者安装github客户端)</li>
</ul>
</blockquote>
<hr>
<h2 id="2、安装hexo"><a href="#2、安装hexo" class="headerlink" title="2、安装hexo"></a>2、安装hexo</h2><p>windows下进入命令行，执行如下命令：</p>
<pre><code>npm install-g hexo
</code></pre><p>然后启动 git shell 初始化hexo。这里，我打算把hexo放在自己新建的 “myblog” 文件夹下，则需要先进入该文件夹下，然后进行初始化，如下命令：</p>
<pre><code>E:\GitHub&gt; cd myblog            //进入目录
E:\GitHub\myblog&gt; hexo init    //进行初始化
</code></pre><p>注：我的git shell 的根目录为 E:\Github ,myblog 文件夹在它下面。<br>然后就是静静的等待它下载完成，可能需要几分钟。<br>最后就可以生成静态界面：</p>
<pre><code>hexo g
</code></pre><p>启动服务：</p>
<pre><code>hexo s
</code></pre><p>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 即可成功打开。<br>到此，你已经成功的弄好博客页面了。</p>
<hr>
<h2 id="3、配置到github"><a href="#3、配置到github" class="headerlink" title="3、配置到github"></a>3、配置到github</h2><p>上面生成的 博客页面仅限本机使用，别人无法访问。有服务器的可以把它配置到服务器上。但这里采用的是提交到github，由它托管，就可以方便的访问了。<br>在github 上建立  <strong><em>用户名.github.io</em></strong> 的仓库。如我的github用户名为：txadf,仓库为：<strong>txadf.github.io</strong>  地址为 ：<a href="https://github.com/txadf/txadf.github.io.git" target="_blank" rel="external">https://github.com/txadf/txadf.github.io.git</a><br>然后打开blog 文件夹下的 _config.yml 文件，在最后修改为如下代码：</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/txadf/txadf.github.io.git
  branch: master
</code></pre><p>最后，提交博客文件到gtihub,执行如下命令：</p>
<pre><code>hexo d
</code></pre><p>如果不出错，那么就可以在浏览器用 txadf.github.进行访问了。</p>
<hr>
<h2 id="4、hexo-相关命令"><a href="#4、hexo-相关命令" class="headerlink" title="4、hexo 相关命令"></a>4、hexo 相关命令</h2><pre><code>cls             清屏
hexo clean      清理项目
hexo g          生成静态界面
hexo s          启动服务器
hexo d          提交到github
hexo help       全部的命令
</code></pre><p>新建文章：</p>
<pre><code>hexo new &quot;blogname&quot;
</code></pre><p>博客支持markdown语法，可以用相关的编辑器写好后放在<strong>_posts</strong>文件下。对于markdown语法，如有不懂课自行百度。</p>
<hr>
<h2 id="5、主题推荐"><a href="#5、主题推荐" class="headerlink" title="5、主题推荐"></a>5、主题推荐</h2><p>对于主题的修改，只需要修改 blog 文件夹下的 <strong>_config.yml</strong> 中的<strong>theme</strong>属性为指定的主题名，并将主题放到theme文件夹下。<br>然后 进行部署（hexo g） 和提交 （hexo d）<br>注：对于其他的属性，修改 方法类似，如网站标题，作者等。</p>
<p>这里推荐几个个人比较喜欢的主题：</p>
<ol>
<li><a href="https://github.com/raytaylorlin/hexo-theme-raytaylorism" target="_blank" rel="external">我的博客主题</a>  </li>
<li><a href="https://github.com/txadf/hexo-theme-spfk" target="_blank" rel="external">hexo-theme-spfk</a></li>
</ol>
<p>更多主题，请访问<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">这里</a></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://imtianx.cn/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是imtianx。欢迎来到我的个人技术博客。</p>
<p>作为一个搞技术的，不断地学习是必不可少的。然而，不管什么技术，如果学习完不使用，很快就会忘记，所以，及时的做笔记十分重要。在此，搭建自己的个人博客，记录自己的成长过程。虽然我还是一个刚入门的技术小白，但我相信，总有一天会成长为一个技术大牛的，加油！<br><strong>联系方式</strong>：<br>QQ： 764275613<br>email： imtianx@163.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://imtianx.cn/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
